steps:
  - group: ":julia: (LuxLib) CUDA GPU"
    steps:
      - label: ":julia: Julia {{matrix.julia}} + CUDA GPU"
        plugins:
          - JuliaCI/julia#v1:
              version: "{{matrix.julia}}"
          - JuliaCI/julia-coverage#v1:
              codecov: true
              dirs:
                - lib/LuxLib/src
                - lib/LuxLib/ext
                - lib/LuxCore/src
                - lib/LuxCore/ext
                - lib/MLDataDevices/src
                - lib/MLDataDevices/ext
                - lib/LuxTestUtils/src
        command: |
          julia --color=yes --code-coverage=user --depwarn=yes --project=lib/LuxLib -e '
            import Pkg;
            Pkg.Registry.update();
            Pkg.instantiate();
            Pkg.activate("lib/LuxLib/test");
            dev_pkgs = Pkg.PackageSpec[];
            for pkg in ("lib/LuxTestUtils", "lib/LuxLib", "lib/MLDataDevices")
              push!(dev_pkgs, Pkg.PackageSpec(path=pkg));
            end;
            Pkg.develop(dev_pkgs)'
          julia --color=yes --code-coverage=user --depwarn=yes --project=lib/LuxLib/test -e '
            import Pkg, LuxLib
            dir = dirname(pathof(LuxLib))
            include(joinpath(dir, "../test/runtests.jl"))'
        agents:
          queue: "juliagpu"
          cuda: "*"
        env:
          BACKEND_GROUP: "CUDA"
        if: build.message !~ /\[skip tests\]/ && build.message !~ /\[skip ci\]/
        timeout_in_minutes: 240
        matrix:
          setup:
            julia:
              - "1"

  - group: ":julia: (LuxLib) AMD GPU"
    steps:
      - label: ":julia: Julia: {{matrix.julia}} + AMD GPU"
        plugins:
          - JuliaCI/julia#v1:
              version: "{{matrix.julia}}"
          - JuliaCI/julia-coverage#v1:
              codecov: true
              dirs:
                - lib/LuxLib/src
                - lib/LuxLib/ext
                - lib/LuxCore/src
                - lib/LuxCore/ext
                - lib/MLDataDevices/src
                - lib/MLDataDevices/ext
                - lib/LuxTestUtils/src
        command: |
          julia --color=yes --code-coverage=user --depwarn=yes --project=lib/LuxLib -e '
            import Pkg;
            Pkg.Registry.update();
            Pkg.instantiate();
            Pkg.activate("lib/LuxLib/test");
            dev_pkgs = Pkg.PackageSpec[];
            for pkg in ("lib/LuxTestUtils", "lib/LuxLib", "lib/MLDataDevices")
              push!(dev_pkgs, Pkg.PackageSpec(path=pkg));
            end;
            Pkg.develop(dev_pkgs)'
          julia --color=yes --code-coverage=user --depwarn=yes --project=lib/LuxLib/test -e '
            import Pkg, LuxLib
            dir = dirname(pathof(LuxLib))
            include(joinpath(dir, "../test/runtests.jl"))'
        agents:
          queue: "juliagpu"
          rocm: "*"
          rocmgpu: "*"
        env:
          BACKEND_GROUP: "AMDGPU"
        if: build.message !~ /\[skip tests\]/ && build.message !~ /\[skip ci\]/
        timeout_in_minutes: 240
        matrix:
          setup:
            julia:
              - "1"

env:
  SECRET_CODECOV_TOKEN: "jQ0BMTQgyZx7QGyU0Q2Ec7qB9mtE2q/tDu0FsfxvEG7/zOAGvXkyXrzIFFOQxvDoFcP+K2+hYZKMxicYdNqzr5wcxu505aNGN2GM3wyegAr+hO6q12bCFYx6qXzU9FLCCdeqINqn9gUSSOlGtWNFrbAlrTyz/D4Yo66TqBDzvaLL63FMnhCLaXW/zJt3hNuEAJaPY2O6Ze1rX2WZ3Y+i+s3uQ8aLImtoCJhPe8CRx+OhuYiTzGhynFfGntZ0738/1RN4gNM0S/hTC4gLE7XMVBanJpGh32rFaiDwW4zAyXKBrDkL3QA3MS1RvLTJxGJ085S16hCk0C4ddAhZCvIM9Q==;U2FsdGVkX1+bXdFeKMs5G79catOCyby2n07A2fg0FjVAvrjQLZ0yfvDS4paJiFikLkodho0khz2YALKb2Y0K6w=="
