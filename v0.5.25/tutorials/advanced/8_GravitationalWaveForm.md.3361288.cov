    74588 ```@meta
   196690 EditURL = "../../../../examples/GravitationalWaveForm/main.jl"
   372359 ```
     2630 
     2839 # Training a Neural ODE to Model Gravitational Waveforms
      285 
   289156 This code is adapted from [Astroinformatics/ScientificMachineLearning](https://github.com/Astroinformatics/ScientificMachineLearning/blob/c93aac3a460d70b4cce98836b677fd9b732e94b7/neuralode_gw.ipynb)
     5042 
   143321 The code has been minimally adapted from
   217815 [Keith et. al. 2021](https://arxiv.org/abs/2102.12695) which originally used Flux.jl
       74 
   143352 ## Package Imports
   143321 
        2 ````julia
   143288 using Lux, ComponentArrays, LineSearches, LuxAMDGPU, LuxCUDA, OrdinaryDiffEq, Optimization,
        1       OptimizationOptimJL, Random, SciMLSensitivity
       65 using CairoMakie, MakiePublication
      233 
       84 CUDA.allowscalar(false)
        3 ````
      113 
      146 ## Define some Utility Functions
      126 
      127 ::: tip
        - 
        - This section can be skipped. It defines functions to simulate the model, however, from a
       40 scientific machine learning perspective, isn't super relevant.
       84 
       42 :::
       42 
       42 We need a very crude 2-body path. Assume the 1-body motion is a newtonian 2-body position
        - vector $r = r_1 - r_2$ and use Newtonian formulas to get $r_1$, $r_2$ (e.g. Theoretical
        - Mechanics of Particles and Continua 4.3)
       20 
       64 ````julia
        - function one2two(path, m₁, m₂)
       42     M = m₁ + m₂
       42     r₁ = m₂ / M .* path
        -     r₂ = -m₁ / M .* path
       42     return r₁, r₂
       42 end
        - ````
        - 
        - ````
        - one2two (generic function with 1 method)
        - ````
        - 
        - Next we define a function to perform the change of variables:
        - $$(\chi(t),\phi(t)) \mapsto (x(t),y(t))$$
        - 
        - ````julia
        - @views function soln2orbit(soln, model_params=nothing)
        -     @assert size(soln, 1) ∈ [2, 4] "size(soln,1) must be either 2 or 4"
        - 
        -     if size(soln, 1) == 2
        -         χ = soln[1, :]
        -         ϕ = soln[2, :]
        - 
        -         @assert length(model_params)==3 "model_params must have length 3 when size(soln,2) = 2"
        -         p, M, e = model_params
        -     else
        -         χ = soln[1, :]
        -         ϕ = soln[2, :]
        -         p = soln[3, :]
        -         e = soln[4, :]
        -     end
       20 
       31     r = p ./ (1 .+ e .* cos.(χ))
       31     x = r .* cos.(ϕ)
        -     y = r .* sin.(ϕ)
       53 
       42     orbit = vcat(x', y')
        0     return orbit
        0 end
        - ````
        0 
        0 ````
        - soln2orbit (generic function with 2 methods)
       53 ````
        - 
       20 This function uses second-order one-sided difference stencils at the endpoints;
        - see https://doi.org/10.1090/S0025-5718-1988-0935077-0
        - 
        - ````julia
        - function d_dt(v::AbstractVector, dt)
        -     a = -3 / 2 * v[1] + 2 * v[2] - 1 / 2 * v[3]
        -     b = (v[3:end] .- v[1:(end - 2)]) / 2
        -     c = 3 / 2 * v[end] - 2 * v[end - 1] + 1 / 2 * v[end - 2]
        -     return [a; b; c] / dt
        - end
        - ````
        - 
        - ````
        - d_dt (generic function with 1 method)
        - ````
        - 
        - This function uses second-order one-sided difference stencils at the endpoints;
        - see https://doi.org/10.1090/S0025-5718-1988-0935077-0
        - 
        - ````julia
        - function d2_dt2(v::AbstractVector, dt)
        -     a = 2 * v[1] - 5 * v[2] + 4 * v[3] - v[4]
        -     b = v[1:(end - 2)] .- 2 * v[2:(end - 1)] .+ v[3:end]
        -     c = 2 * v[end] - 5 * v[end - 1] + 4 * v[end - 2] - v[end - 3]
        -     return [a; b; c] / (dt^2)
        - end
        - ````
        - 
        - ````
        - d2_dt2 (generic function with 1 method)
        - ````
        - 
        - Now we define a function to compute the trace-free moment tensor from the orbit
        - 
        - ````julia
        - function orbit2tensor(orbit, component, mass=1)
        -     x = orbit[1, :]
        -     y = orbit[2, :]
        - 
        -     Ixx = x .^ 2
        -     Iyy = y .^ 2
        -     Ixy = x .* y
        -     trace = Ixx .+ Iyy
        - 
        -     if component[1] == 1 && component[2] == 1
        -         tmp = Ixx .- trace ./ 3
        -     elseif component[1] == 2 && component[2] == 2
        -         tmp = Iyy .- trace ./ 3
        -     else
        -         tmp = Ixy
        -     end
        - 
        -     return mass .* tmp
        - end
        - 
        - function h_22_quadrupole_components(dt, orbit, component, mass=1)
        -     mtensor = orbit2tensor(orbit, component, mass)
        -     mtensor_ddot = d2_dt2(mtensor, dt)
        -     return 2 * mtensor_ddot
        - end
        - 
        - function h_22_quadrupole(dt, orbit, mass=1)
        -     h11 = h_22_quadrupole_components(dt, orbit, (1, 1), mass)
        -     h22 = h_22_quadrupole_components(dt, orbit, (2, 2), mass)
        -     h12 = h_22_quadrupole_components(dt, orbit, (1, 2), mass)
        -     return h11, h12, h22
        - end
        - 
        - function h_22_strain_one_body(dt::T, orbit) where {T}
        -     h11, h12, h22 = h_22_quadrupole(dt, orbit)
        - 
        -     h₊ = h11 - h22
        -     hₓ = T(2) * h12
        - 
        -     scaling_const = √(T(π) / 5)
        -     return scaling_const * h₊, -scaling_const * hₓ
        - end
        - 
        - function h_22_quadrupole_two_body(dt, orbit1, mass1, orbit2, mass2)
        -     h11_1, h12_1, h22_1 = h_22_quadrupole(dt, orbit1, mass1)
        -     h11_2, h12_2, h22_2 = h_22_quadrupole(dt, orbit2, mass2)
        -     h11 = h11_1 + h11_2
        -     h12 = h12_1 + h12_2
        -     h22 = h22_1 + h22_2
        -     return h11, h12, h22
        - end
        - 
        - function h_22_strain_two_body(dt::T, orbit1, mass1, orbit2, mass2) where {T}
        -     # compute (2,2) mode strain from orbits of BH 1 of mass1 and BH2 of mass 2
        - 
        -     @assert abs(mass1 + mass2 - 1.0)<1e-12 "Masses do not sum to unity"
        - 
        -     h11, h12, h22 = h_22_quadrupole_two_body(dt, orbit1, mass1, orbit2, mass2)
        - 
        -     h₊ = h11 - h22
        -     hₓ = T(2) * h12
        - 
        -     scaling_const = √(T(π) / 5)
        -     return scaling_const * h₊, -scaling_const * hₓ
        - end
        - 
        - function compute_waveform(dt::T, soln, mass_ratio, model_params=nothing) where {T}
        -     @assert mass_ratio≤1 "mass_ratio must be <= 1"
        -     @assert mass_ratio≥0 "mass_ratio must be non-negative"
        - 
        -     orbit = soln2orbit(soln, model_params)
        -     if mass_ratio > 0
        -         m₂ = inv(T(1) + mass_ratio)
        -         m₁ = mass_ratio * m₂
        - 
        -         orbit₁, orbit₂ = one2two(orbit, m₁, m₂)
        -         waveform = h_22_strain_two_body(dt, orbit1, mass1, orbit2, mass2)
        -     else
        -         waveform = h_22_strain_one_body(dt, orbit)
        -     end
        -     return waveform
        - end
        - ````
        - 
        - ````
        - compute_waveform (generic function with 2 methods)
        - ````
        - 
        - ## Simulating the True Model
        - 
        - `RelativisticOrbitModel` defines system of odes which describes motion of point like
        - particle in schwarzschild background, uses
        - 
        - $$u[1] = \chi$$
        - $$u[2] = \phi$$
        - 
        - where, $p$, $M$, and $e$ are constants
        - 
        - ````julia
        - function RelativisticOrbitModel(u, (p, M, e), t)
        -     χ, ϕ = u
        - 
        -     numer = (p - 2 - 2 * e * cos(χ)) * (1 + e * cos(χ))^2
        -     denom = sqrt((p - 2)^2 - 4 * e^2)
        - 
        -     χ̇ = numer * sqrt(p - 6 - 2 * e * cos(χ)) / (M * (p^2) * denom)
        -     ϕ̇ = numer / (M * (p^(3 / 2)) * denom)
        - 
        -     return [χ̇, ϕ̇]
        - end
        - 
        - mass_ratio = 0.0         # test particle
        - u0 = Float64[π, 0.0]     # initial conditions
        - datasize = 250
        - tspan = (0.0f0, 6.0f4)   # timespace for GW waveform
        - tsteps = range(tspan[1], tspan[2]; length=datasize)  # time at each timestep
        - dt_data = tsteps[2] - tsteps[1]
        - dt = 100.0
        - const ode_model_params = [100.0, 1.0, 0.5]; # p, M, e
        - ````
        - 
        - Let's simulate the true model and plot the results using `OrdinaryDiffEq.jl`
        - 
        - ````julia
        - prob = ODEProblem(RelativisticOrbitModel, u0, tspan, ode_model_params)
        - soln = Array(solve(prob, RK4(); saveat=tsteps, dt, adaptive=false))
        - waveform = first(compute_waveform(dt_data, soln, mass_ratio, ode_model_params))
        - 
        - fig = with_theme(theme_web()) do
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Time", ylabel="Waveform")
        - 
        -     l = lines!(ax, tsteps, waveform; linewidth=2, alpha=0.75)
        -     s = scatter!(ax, tsteps, waveform; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     axislegend(ax, [[l, s]], ["Waveform Data"])
        - 
        -     return fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=408 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAMwCAIAAAC/VA7OAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdd3wc9Z0//s+UrVr1YlnNXe4VG4NNs40pNiUkoRgSLsBxlFzujlyO8oDHJXnkGyAxR3LcQeASSnKhmN78OxtwbDAGF3DvlmxZsvpKWmn7Tvv9MdLoMzO7a1mWV7Or1/Nxj3usZse7owyrnfe835/3m1EUhQAAAAAAAMDIww73AQAAAAAAAMDwQEAIAAAAAAAwQiEgBAAAAAAAGKEQEAIAAAAAAIxQCAgBAAAAAABGKASEAAAAAAAAIxQCQgAAAAAAgBEKASEAAAAAAMAIhYAQAAAAAABghEJACAAAAAAAMEIhIAQAAAAAABihEBACAAAAAACMUAgIAQAAAAAARigEhAAAAAAAACMUAkIAAAAAAIARCgEhAAAAAADACIWAEAAAAAAAYIRCQAgAAAAAADBCISAEAAAAAAAYoRAQAgAAAAAAjFAICAEAAAAAAEYoBIQAAAAAAAAjFAJCAAAAAACAEQoBIQAAAAAAwAiFgBAAAAAAAGCEQkAIAAAAAAAwQiEgBAAAAAAAGKEQEAIAAAAAAIxQCAgBAAAAAABGKASEAAAAAAAAIxQ/3AcAQ4ZhmOE+BAAAAAAAGGKKopy7F0eGEAAAAAAAYIRChjDTnNP7BwAAAAAAkDIpqAFEhhAAAAAAAGCEQkAIAAAAAAAwQiEgBAAAAAAAGKEQEAIAAAAAAIxQCAgBAAAAAABGKASEAAAAAAAAIxQCQgAAAAAAgBEKASEAAAAAAMAIhcH0mcbj8WiPA4HAMB4JAAAAAABYHKMoynAfAwwNhmEMW3ByAQAAAADSl3qFf06v6pEhzDR+v3+4DwEAAAAAANIDMoSZIwX3DwAAAAAAIG
        - ```
        - 
        - ## Defiing a Neural Network Model
        - 
        - Next, we define the neural network model that takes 1 input (time) and has two outputs.
        - We'll make a function `ODE_model` that takes the initial conditions, neural network
        - parameters and a time as inputs and returns the derivatives.
        - 
        - It is typically never recommended to use globals but incase you do use them, make sure
        - to mark them as `const`.
        - 
        - We will deviate from the standard Neural Network initialization and use
        - `WeightInitializers.jl`,
        - 
        - ````julia
        - const nn = Chain(Base.Fix1(broadcast, cos),
        -     Dense(1 => 32, cos; init_weight=truncated_normal(; std=1e-4)),
        -     Dense(32 => 32, cos; init_weight=truncated_normal(; std=1e-4)),
        -     Dense(32 => 2; init_weight=truncated_normal(; std=1e-4)))
        - ps, st = Lux.setup(MersenneTwister(), nn)
        - ````
        - 
        - ````
        - ((layer_1 = NamedTuple(), layer_2 = (weight = Float32[3.253755f-5; 0.00011023502; 0.00022215492; -0.00027282586; -0.0001539458; -3.0987543f-5; -7.5232296f-5; -7.109174f-5; -2.9804771f-6; -8.364445f-6; 7.1562965f-5; -0.00019450237; 1.135969f-5; 0.00018128267; 2.9909252f-5; 0.00014902801; 1.3110728f-5; -7.7600256f-5; 2.2392555f-6; -2.5444855f-5; -8.614631f-5; 0.00010998092; 6.2911866f-5; -0.00018314538; 3.8999613f-5; -8.5759435f-9; 6.884337f-5; 2.0834572f-5; -2.532146f-6; -9.3424176f-5; 3.7561433f-5; 4.3598775f-5;;], bias = Float32[0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0;;]), layer_3 = (weight = Float32[-2.7582104f-5 -0.00015925757 -4.3019514f-5 -9.5117546f-5 6.419645f-5 -2.0076686f-5 -8.384458f-5 -2.8336015f-5 2.6236563f-5 -2.182497f-6 -6.5519904f-5 3.3364184f-5 9.964958f-5 -6.758986f-5 -7.667304f-5 0.00017637346 3.0717878f-5 -0.0001496838 1.4287757f-5 -0.00011549922 -0.0001580604 -5.69916f-5
        - ````
        - 
        - Similar to most DL frameworks, Lux defaults to using `Float32`, however, in this case we
        - need Float64
        - 
        - ````julia
        - const params = ComponentArray{Float64}(ps)
        - ````
        - 
        - ````
        - ComponentVector{Float64}(layer_1 = Float64[], layer_2 = (weight = [3.2537551305722445e-5; 0.00011023502156604081; 0.00022215492208488286; -0.0002728258550632745; -0.00015394580259453505; -3.098754314123653e-5; -7.523229578509927e-5; -7.109173748176545e-5; -2.9804771202179836e-6; -8.364445420738775e-6; 7.156296487664804e-5; -0.0001945023686857894; 1.135968977905577e-5; 0.0001812826667446643; 2.9909251679782756e-5; 0.00014902801194693893; 1.3110728104948066e-5; -7.760025619063526e-5; 2.2392555365513545e-6; -2.544485505495686e-5; -8.614631224190816e-5; 0.00010998092329828069; 6.291186582529917e-5; -0.0001831453846534714; 3.89996130252257e-5; -8.575943510891193e-9; 6.884337199153379e-5; 2.083457184198778e-5; -2.532146027078852e-6; -9.34241761569865e-5; 3.7561432691290975e-5; 4.35987749369815e-5;;], bias = [0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0;;]), layer_3 = (weight = [-2.7582103939494118e-5 -
        - ````
        - 
        - Now we define a system of odes which describes motion of point like particle with
        - Newtonian physics, uses
        - 
        - $$u[1] = \chi$$
        - $$u[2] = \phi$$
        - 
        - where, $p$, $M$, and $e$ are constants
        - 
        - ````julia
        - function ODE_model(u, nn_params, t)
        -     χ, ϕ = u
        -     p, M, e = ode_model_params
        - 
        -     # In this example we know that `st` is am empty NamedTuple hence we can safely ignore
        -     # it, however, in general, we should use `st` to store the state of the neural network.
        -     y = 1 .+ first(nn([first(u)], nn_params, st))
        - 
        -     numer = (1 + e * cos(χ))^2
        -     denom = M * (p^(3 / 2))
        - 
        -     χ̇ = (numer / denom) * y[1]
        -     ϕ̇ = (numer / denom) * y[2]
        - 
        -     return [χ̇, ϕ̇]
        - end
        - ````
        - 
        - ````
        - ODE_model (generic function with 1 method)
        - ````
        - 
        - Let us now simulate the neural network model and plot the results. We'll use the untrained
        - neural network parameters to simulate the model.
        - 
        - ````julia
        - prob_nn = ODEProblem(ODE_model, u0, tspan, params)
        - soln_nn = Array(solve(prob_nn, RK4(); u0, p=params, saveat=tsteps, dt, adaptive=false))
        - waveform_nn = first(compute_waveform(dt_data, soln_nn, mass_ratio, ode_model_params))
        - 
        - fig = with_theme(theme_web()) do
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Time", ylabel="Waveform")
        - 
        -     l1 = lines!(ax, tsteps, waveform; linewidth=2, alpha=0.75)
        -     s1 = scatter!(ax, tsteps, waveform; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     l2 = lines!(ax, tsteps, waveform_nn; linewidth=2, alpha=0.75)
        -     s2 = scatter!(ax, tsteps, waveform_nn; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     axislegend(ax, [[l1, s1], [l2, s2]],
        -         ["Waveform Data", "Waveform Neural Net (Untrained)"]; position=:lb)
        - 
        -     return fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=408 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAMwCAIAAAC/VA7OAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdeZAkV3Uv/nNvLrX2vs1Mz6aZ0Ugz2hBIMkheMAL7GcsCjGQIHAY7FITtcITD/EHY/Gf+8YbDjiDsXxgLh4OwMU/g5yc57BeBARsEkpBAQtvs+9I9vS+153Lv/f2R1Vk3s6p7epvurOrvhwlFdVZ1VQ45VZUnz7nnMKUUAQAAAAAAwM7Dt3sHAAAAAAAAYHsgIAQAAAAAANihEBACAAAAAADsUAgIAQAAAAAAdigEhAAAAAAAADsUAkIAAAAAAIAdCgEhAAAAAADADoWAEAAAAAAAYIdCQAgAAAAAALBDISAEAAAAAADYoRAQAgAAAAAA7FAICAEAAAAAAHYoBIQAAAAAAAA7FAJCAAAAAACAHQoBIQAAAAAAwA6FgBAAAAAAAGCHQkAIAAAAAACwQyEgBAAAAAAA2KEQEAIAAAAAAOxQCAgBAAAAAAB2KASEAAAAAAAAOxQCQgAAAAAAgB0KASEAAAAAAMAOhYAQAAAAAABgh0JACAAAAAAAsEMhIAQAAAAAANihEBACAAAAAADsUAgIAQAAAAAAdigEhAAAAAAAADsUAkIAAAAAAIAdytzuHYBNwxjb7l0AAAAAAIBNppS6dU+ODCEAAAAAAMAOhQxhp7ml1w8AAAAAAGDLbEENIDKEAAAAAAAAOxQCQgAAAAAAgB0KASEAAAAAAMAOhYAQAAAAAABgh0JACAAAAAAAsEMhIAQAAAAAANihEBACAAAAAADsUAgIAQAAAAAAdigMpu80TzzxRHj7X//1X7dxTwAAAAAAIOGYUmq79wE2B2MstgUHFwAAAACgfQVn+Lf0rB4Zwk7zjW98Y7t3AQAAAAAA2gMyhJ
        - ```
        - 
        - ## Setting Up for Training the Neural Network
        - 
        - Next, we define the objective (loss) function to be minimized when training the neural
        - differential equations.
        - 
        - ````julia
        - function loss(θ)
        -     pred = Array(solve(prob_nn, RK4(); u0, p=θ, saveat=tsteps, dt, adaptive=false))
        -     pred_waveform = first(compute_waveform(dt_data, pred, mass_ratio, ode_model_params))
        -     loss = sum(abs2, waveform .- pred_waveform)
        -     return loss, pred_waveform
        - end
        - ````
        - 
        - ````
        - loss (generic function with 1 method)
        - ````
        - 
        - Warmup the loss function
        - 
        - ````julia
        - loss(params)
        - ````
        - 
        - ````
        - (0.18774782607237886, [-0.024276489325167974, -0.02349082164220751, -0.022705153959247146, -0.021377591284622115, -0.019480298978971855, -0.016972867892375315, -0.01380223160019356, -0.009899687647818163, -0.005183159691125864, 0.0004431558140615127, 0.00707953691718717, 0.01480961721680011, 0.02365229312733166, 0.0334319467022312, 0.04349660755384321, 0.05205108879883096, 0.05474666254318939, 0.042394681661056886, 0.0014067124169039628, -0.06708807531838103, -0.11037765656897057, -0.07556287503271451, -0.006327752187827747, 0.03882668293562018, 0.05406753929272405, 0.05274016447028262, 0.04470891755046972, 0.034777639221413616, 0.024962107108019778, 0.016017383540259035, 0.00816038459420299, 0.0013939391090184992, -0.004358778594748368, -0.009195474260911291, -0.013211632820369234, -0.01648923120081668, -0.01909809274206529, -0.02109272773986141, -0.022514427905437794, -0.02339208808318434, -0.02374312189025296, -0.02357376355509537, -0.02288027180635553, -0.02164659458992194, -0.019846351621989833, -0.0174
        - ````
        - 
        - Now let us define a callback function to store the loss over time
        - 
        - ````julia
        - const losses = Float64[]
        - 
        - function callback(θ, l, pred_waveform)
        -     push!(losses, l)
        -     println("Training || Iteration: $(length(losses)) || Loss: $(l)")
        -     return false
        - end
        - ````
        - 
        - ````
        - callback (generic function with 1 method)
        - ````
        - 
        - ## Training the Neural Network
        - 
        - Training uses the BFGS optimizers. This seems to give good results because the Newtonian
        - model seems to give a very good initial guess
        - 
        - ````julia
        - adtype = Optimization.AutoZygote()
        - optf = Optimization.OptimizationFunction((x, p) -> loss(x), adtype)
        - optprob = Optimization.OptimizationProblem(optf, params)
        - res = Optimization.solve(
        -     optprob, BFGS(; initial_stepnorm=0.01, linesearch=LineSearches.BackTracking());
        -     callback, maxiters=1000)
        - ````
        - 
        - ````
        - retcode: Success
        - u: ComponentVector{Float64}(layer_1 = Float64[], layer_2 = (weight = [3.25375513057181e-5; 0.00011023502156590823; 0.00022215492208464794; -0.0002728258550633164; -0.0001539458025944734; -3.09875431411834e-5; -7.523229578494354e-5; -7.109173748170826e-5; -2.980477120214361e-6; -8.364445420728753e-6; 7.156296487659569e-5; -0.00019450236868555988; 1.1359689779055152e-5; 0.00018128266674473248; 2.9909251679817545e-5; 0.00014902801194673928; 1.3110728104941325e-5; -7.760025619056844e-5; 2.2392555365459622e-6; -2.544485505492038e-5; -8.614631224182602e-5; 0.00010998092329816545; 6.291186582535836e-5; -0.000183145384653103; 3.899961302519157e-5; -8.57594351087854e-9; 6.884337199151927e-5; 2.0834571841952602e-5; -2.5321460270723426e-6; -9.342417615684626e-5; 3.756143269124247e-5; 4.359877493695609e-5;;], bias = [4.839213956860906e-18; 1.5140663545446552e-16; 2.69162444413117e-16; 4.6931830695831854e-17; -6.834171681267583e-17; -6.091147364262885e-17; -1.7791950382246418e-16; -6.393419135580497e-17; -4.1056028272383
        - ````
        - 
        - ## Visualizing the Results
        - 
        - Let us now plot the loss over time
        - 
        - ````julia
        - fig = with_theme(theme_web()) do
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Iteration", ylabel="Loss")
        - 
        -     lines!(ax, losses; linewidth=2, alpha=0.75)
        - 
        -     return fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=408 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAMwCAIAAAC/VA7OAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdeXzdZZ0v8OecbE2ztIVuSWiblFJKATsdNgGHZbACpcCMghcZNxTlMlfHZZzrdZxxFkfmXke8zuLrhcwgW0XU4QJSNhGvlx1FBKSUCjRpS5Kme7ZmPTn3j1NPT/ckTfI7y/v913Oe8+vv962Jvvz09zzPN5ZMJgMAAACFJx51AQAAAERDIAQAAChQAiEAAECBEggBAAAKlEAIAABQoARCAACAAiUQAgAAFCiBEAAAoEAJhAAAAAVKIAQAAChQAiEAAECBEggBAAAKlEAIAABQoARCAACAAiUQAgAAFCiBEAAAoEAJhAAAAAVKIAQAAChQAiEAAECBEggBAAAKlEAIAABQoARCAACAAiUQAgAAFCiBEAAAoEAJhAAAAAVKIAQAAChQAiEAAECBEggBAAAKlEAIAABQoARCAACAAlUcdQEcVCwWi7oEAAAgYslkcvxu7g0hAABAgfKGMNuN678HAAAAWWsC1gx6QwgAAFCgBEIAAIACJRACAAAUKIEQAACgQAmEAAAABUogBAAAKFACIQAAQIESCAEAAAqUQAgAAFCgBEIAAIACJRACAAAUKIEQAACgQAmEAAAABUogBAAAKFACIQAAQIESCAEAAAqUQAgAAFCgBEIAAIACJRACAAAUKIEQAACgQBVHXQCH8YEPfCA9/v73vx9hJQAAQJ6JJZPJqGvgwGKx2D4zflgAAFA4UolgXFOAN4TZ7q677oq6BAAAID95Q5i9JuDfAwAAgKw1AYnAoTIAAAAFSiAEAAAoUAIhAABAgRIIAQAACpRTRjm8ZDK0butubG7f0dm34l0NUZcDAACMDYGQwxhMDP3jbb/s6RsMIc
        - ```
        - 
        - Finally let us visualize the results
        - 
        - ````julia
        - prob_nn = ODEProblem(ODE_model, u0, tspan, res.u)
        - soln_nn = Array(solve(prob_nn, RK4(); u0, p=res.u, saveat=tsteps, dt, adaptive=false))
        - waveform_nn_trained = first(compute_waveform(
        -     dt_data, soln_nn, mass_ratio, ode_model_params))
        - 
        - fig = with_theme(theme_web()) do
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Time", ylabel="Waveform")
        - 
        -     l1 = lines!(ax, tsteps, waveform; linewidth=2, alpha=0.75)
        -     s1 = scatter!(ax, tsteps, waveform; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     l2 = lines!(ax, tsteps, waveform_nn; linewidth=2, alpha=0.75)
        -     s2 = scatter!(ax, tsteps, waveform_nn; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     l3 = lines!(ax, tsteps, waveform_nn_trained; linewidth=2, alpha=0.75)
        -     s3 = scatter!(
        -         ax, tsteps, waveform_nn_trained; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     axislegend(ax, [[l1, s1], [l2, s2], [l3, s3]],
        -         ["Waveform Data", "Waveform Neural Net (Untrained)", "Waveform Neural Net"];
        -         position=:lb)
        - 
        -     return fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=408 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAMwCAIAAAC/VA7OAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdaYwk13Uv+HPvjYjcat+7q3c2l6ZIraRM0bK1znuWTEp6A8n6YMMCLBvwwIA9huHPlr/ahgwLsmFDBrzBsOR5eBBH8NPIlN9oJNKURFEbxbVXdnd1d+2VlVts9575EJmRN7Oqm1Xd1ZWRWf8fBCMzKrvyyqGsjBPn3HMEMxMAAAAAAAAcPLLXCwAAAAAAAIDeQEAIAAAAAABwQCEgBAAAAAAAOKAQEAIAAAAAABxQCAgBAAAAAAAOKASEAAAAAAAABxQCQgAAAAAAgAMKASEAAAAAAMABhYAQAAAAAADggEJACAAAAAAAcEAhIAQAAAAAADigEBACAAAAAAAcUAgIAQAAAAAADigEhAAAAAAAAAcUAkIAAAAAAIADCgEhAAAAAADAAYWAEAAAAAAA4IBCQAgAAAAAAHBAISAEAAAAAAA4oBAQAgAAAAAAHFAICAEAAAAAAA4oBIQAAAAAAAAHFAJCAAAAAACAAwoBIQAAAAAAwAGFgBAAAAAAAOCAQkAIAAAAAABwQCEgBAAAAAAAOKAQEAIAAAAAABxQCAgBAAAAAAAOKASEAAAAAAAAB5TT6wXAnhFC9HoJAAAAAACwx5j57v1yZAgBAAAAAAAOKGQIB81dvX8AAAAAAAD7Zh9qAJEhBAAAAAAAOKAQEAIAAAAAABxQCAgBAAAAAAAOKASEAAAAAAAABxQCQgAAAAAAgAMKASEAAAAAAMABhYAQAAAAAADggEJACAAAAAAAcEAhIAQAAAAAADigEBACAAAAAAAcUAgIAQAAAAAADigEhAAAAAAAAAcUAkIAAAAAAIADCgEhAAAAAADAAYWAEAAAAAAA4IBCQA
        - ```
        - 
        - ## Appendix
        - 
        - ````julia
        - using InteractiveUtils
        - InteractiveUtils.versioninfo()
        - if @isdefined(LuxCUDA) && CUDA.functional(); println(); CUDA.versioninfo(); end
        - if @isdefined(LuxAMDGPU) && LuxAMDGPU.functional(); println(); AMDGPU.versioninfo(); end
        - ````
        - 
        - ````
        - Julia Version 1.10.2
        - Commit bd47eca2c8a (2024-03-01 10:14 UTC)
        - Build Info:
        -   Official https://julialang.org/ release
        - Platform Info:
        -   OS: Linux (x86_64-linux-gnu)
        -   CPU: 48 × AMD EPYC 7402 24-Core Processor
        -   WORD_SIZE: 64
        -   LIBM: libopenlibm
        -   LLVM: libLLVM-15.0.7 (ORCJIT, znver2)
        - Threads: 48 default, 0 interactive, 24 GC (on 2 virtual cores)
        - Environment:
        -   LD_LIBRARY_PATH = /usr/local/nvidia/lib:/usr/local/nvidia/lib64
        -   JULIA_DEPOT_PATH = /root/.cache/julia-buildkite-plugin/depots/01872db4-8c79-43af-ab7d-12abac4f24f6
        -   JULIA_PROJECT = /var/lib/buildkite-agent/builds/gpuci-5/julialang/lux-dot-jl/docs/Project.toml
        -   JULIA_AMDGPU_LOGGING_ENABLED = true
        -   JULIA_DEBUG = Literate
        -   JULIA_CPU_THREADS = 2
        -   JULIA_NUM_THREADS = 48
        -   JULIA_LOAD_PATH = @:@v#.#:@stdlib
        -   JULIA_CUDA_HARD_MEMORY_LIMIT = 25%
        - 
        - CUDA runtime 12.3, artifact installation
        - CUDA driver 12.4
        - NVIDIA driver 550.54.14
        - 
        - CUDA libraries: 
        - - CUBLAS: 12.3.4
        - - CURAND: 10.3.4
        - - CUFFT: 11.0.12
        - - CUSOLVER: 11.5.4
        - - CUSPARSE: 12.2.0
        - - CUPTI: 21.0.0
        - - NVML: 12.0.0+550.54.14
        - 
        - Julia packages: 
        - - CUDA: 5.2.0
        - - CUDA_Driver_jll: 0.7.0+1
        - - CUDA_Runtime_jll: 0.11.1+0
        - 
        - Toolchain:
        - - Julia: 1.10.2
        - - LLVM: 15.0.7
        - 
        - Environment:
        - - JULIA_CUDA_HARD_MEMORY_LIMIT: 25%
        - 
        - 1 device:
        -   0: NVIDIA A100-PCIE-40GB MIG 1g.5gb (sm_80, 3.850 GiB / 4.750 GiB available)
        - ┌ Warning: LuxAMDGPU is loaded but the AMDGPU is not functional.
        - └ @ LuxAMDGPU ~/.cache/julia-buildkite-plugin/depots/01872db4-8c79-43af-ab7d-12abac4f24f6/packages/LuxAMDGPU/sGa0S/src/LuxAMDGPU.jl:19
        - 
        - ````
        - 
        - ---
        - 
        - *This page was generated using [Literate.jl](https://github.com/fredrikekre/Literate.jl).*
        - 
