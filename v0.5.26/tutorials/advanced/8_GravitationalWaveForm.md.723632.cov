   202225 ```@meta
   409050 EditURL = "../../../../examples/GravitationalWaveForm/main.jl"
   665697 ```
     2930 
     3467 # Training a Neural ODE to Model Gravitational Waveforms
      686 
   608755 This code is adapted from [Astroinformatics/ScientificMachineLearning](https://github.com/Astroinformatics/ScientificMachineLearning/blob/c93aac3a460d70b4cce98836b677fd9b732e94b7/neuralode_gw.ipynb)
     5423 
   303017 The code has been minimally adapted from
   504870 [Keith et. al. 2021](https://arxiv.org/abs/2102.12695) which originally used Flux.jl
      185 
   303101 ## Package Imports
   303017 
        2 ````julia
   302969 using Lux, ComponentArrays, LineSearches, LuxAMDGPU, LuxCUDA, OrdinaryDiffEq, Optimization,
        1       OptimizationOptimJL, Random, SciMLSensitivity
      133 using CairoMakie, MakiePublication
      533 
      200 CUDA.allowscalar(false)
        3 ````
      320 
      368 ## Define some Utility Functions
      300 
      301 ::: tip
        - 
        - This section can be skipped. It defines functions to simulate the model, however, from a
      136 scientific machine learning perspective, isn't super relevant.
      200 
      100 :::
      100 
      100 We need a very crude 2-body path. Assume the 1-body motion is a newtonian 2-body position
        - vector $r = r_1 - r_2$ and use Newtonian formulas to get $r_1$, $r_2$ (e.g. Theoretical
        - Mechanics of Particles and Continua 4.3)
       68 
      132 ````julia
        - function one2two(path, m₁, m₂)
      100     M = m₁ + m₂
      100     r₁ = m₂ / M .* path
        -     r₂ = -m₁ / M .* path
      100     return r₁, r₂
      100 end
        - ````
        - 
        - ````
        - one2two (generic function with 1 method)
        - ````
        - 
        - Next we define a function to perform the change of variables:
        - $$(\chi(t),\phi(t)) \mapsto (x(t),y(t))$$
        - 
        - ````julia
        - @views function soln2orbit(soln, model_params=nothing)
        -     @assert size(soln, 1) ∈ [2, 4] "size(soln,1) must be either 2 or 4"
        - 
        -     if size(soln, 1) == 2
        -         χ = soln[1, :]
        -         ϕ = soln[2, :]
        - 
        -         @assert length(model_params)==3 "model_params must have length 3 when size(soln,2) = 2"
        -         p, M, e = model_params
        -     else
        -         χ = soln[1, :]
        -         ϕ = soln[2, :]
        -         p = soln[3, :]
        -         e = soln[4, :]
        -     end
       68 
       84     r = p ./ (1 .+ e .* cos.(χ))
       84     x = r .* cos.(ϕ)
        -     y = r .* sin.(ϕ)
      116 
      100     orbit = vcat(x', y')
        0     return orbit
        0 end
        - ````
        0 
        0 ````
        - soln2orbit (generic function with 2 methods)
      116 ````
        - 
       68 This function uses second-order one-sided difference stencils at the endpoints;
        - see https://doi.org/10.1090/S0025-5718-1988-0935077-0
        - 
        - ````julia
        - function d_dt(v::AbstractVector, dt)
        -     a = -3 / 2 * v[1] + 2 * v[2] - 1 / 2 * v[3]
        -     b = (v[3:end] .- v[1:(end - 2)]) / 2
        -     c = 3 / 2 * v[end] - 2 * v[end - 1] + 1 / 2 * v[end - 2]
        -     return [a; b; c] / dt
        - end
        - ````
        - 
        - ````
        - d_dt (generic function with 1 method)
        - ````
        - 
        - This function uses second-order one-sided difference stencils at the endpoints;
        - see https://doi.org/10.1090/S0025-5718-1988-0935077-0
        - 
        - ````julia
        - function d2_dt2(v::AbstractVector, dt)
        -     a = 2 * v[1] - 5 * v[2] + 4 * v[3] - v[4]
        -     b = v[1:(end - 2)] .- 2 * v[2:(end - 1)] .+ v[3:end]
        -     c = 2 * v[end] - 5 * v[end - 1] + 4 * v[end - 2] - v[end - 3]
        -     return [a; b; c] / (dt^2)
        - end
        - ````
        - 
        - ````
        - d2_dt2 (generic function with 1 method)
        - ````
        - 
        - Now we define a function to compute the trace-free moment tensor from the orbit
        - 
        - ````julia
        - function orbit2tensor(orbit, component, mass=1)
        -     x = orbit[1, :]
        -     y = orbit[2, :]
        - 
        -     Ixx = x .^ 2
        -     Iyy = y .^ 2
        -     Ixy = x .* y
        -     trace = Ixx .+ Iyy
        - 
        -     if component[1] == 1 && component[2] == 1
        -         tmp = Ixx .- trace ./ 3
        -     elseif component[1] == 2 && component[2] == 2
        -         tmp = Iyy .- trace ./ 3
        -     else
        -         tmp = Ixy
        -     end
        - 
        -     return mass .* tmp
        - end
        - 
        - function h_22_quadrupole_components(dt, orbit, component, mass=1)
        -     mtensor = orbit2tensor(orbit, component, mass)
        -     mtensor_ddot = d2_dt2(mtensor, dt)
        -     return 2 * mtensor_ddot
        - end
        - 
        - function h_22_quadrupole(dt, orbit, mass=1)
        -     h11 = h_22_quadrupole_components(dt, orbit, (1, 1), mass)
        -     h22 = h_22_quadrupole_components(dt, orbit, (2, 2), mass)
        -     h12 = h_22_quadrupole_components(dt, orbit, (1, 2), mass)
        -     return h11, h12, h22
        - end
        - 
        - function h_22_strain_one_body(dt::T, orbit) where {T}
        -     h11, h12, h22 = h_22_quadrupole(dt, orbit)
        - 
        -     h₊ = h11 - h22
        -     hₓ = T(2) * h12
        - 
        -     scaling_const = √(T(π) / 5)
        -     return scaling_const * h₊, -scaling_const * hₓ
        - end
        - 
        - function h_22_quadrupole_two_body(dt, orbit1, mass1, orbit2, mass2)
        -     h11_1, h12_1, h22_1 = h_22_quadrupole(dt, orbit1, mass1)
        -     h11_2, h12_2, h22_2 = h_22_quadrupole(dt, orbit2, mass2)
        -     h11 = h11_1 + h11_2
        -     h12 = h12_1 + h12_2
        -     h22 = h22_1 + h22_2
        -     return h11, h12, h22
        - end
        - 
        - function h_22_strain_two_body(dt::T, orbit1, mass1, orbit2, mass2) where {T}
        -     # compute (2,2) mode strain from orbits of BH 1 of mass1 and BH2 of mass 2
        - 
        -     @assert abs(mass1 + mass2 - 1.0)<1e-12 "Masses do not sum to unity"
        - 
        -     h11, h12, h22 = h_22_quadrupole_two_body(dt, orbit1, mass1, orbit2, mass2)
        - 
        -     h₊ = h11 - h22
        -     hₓ = T(2) * h12
        - 
        -     scaling_const = √(T(π) / 5)
        -     return scaling_const * h₊, -scaling_const * hₓ
        - end
        - 
        - function compute_waveform(dt::T, soln, mass_ratio, model_params=nothing) where {T}
        -     @assert mass_ratio≤1 "mass_ratio must be <= 1"
        -     @assert mass_ratio≥0 "mass_ratio must be non-negative"
        - 
        -     orbit = soln2orbit(soln, model_params)
        -     if mass_ratio > 0
        -         m₂ = inv(T(1) + mass_ratio)
        -         m₁ = mass_ratio * m₂
        - 
        -         orbit₁, orbit₂ = one2two(orbit, m₁, m₂)
        -         waveform = h_22_strain_two_body(dt, orbit1, mass1, orbit2, mass2)
        -     else
        -         waveform = h_22_strain_one_body(dt, orbit)
        -     end
        -     return waveform
        - end
        - ````
        - 
        - ````
        - compute_waveform (generic function with 2 methods)
        - ````
        - 
        - ## Simulating the True Model
        - 
        - `RelativisticOrbitModel` defines system of odes which describes motion of point like
        - particle in schwarzschild background, uses
        - 
        - $$u[1] = \chi$$
        - $$u[2] = \phi$$
        - 
        - where, $p$, $M$, and $e$ are constants
        - 
        - ````julia
        - function RelativisticOrbitModel(u, (p, M, e), t)
        -     χ, ϕ = u
        - 
        -     numer = (p - 2 - 2 * e * cos(χ)) * (1 + e * cos(χ))^2
        -     denom = sqrt((p - 2)^2 - 4 * e^2)
        - 
        -     χ̇ = numer * sqrt(p - 6 - 2 * e * cos(χ)) / (M * (p^2) * denom)
        -     ϕ̇ = numer / (M * (p^(3 / 2)) * denom)
        - 
        -     return [χ̇, ϕ̇]
        - end
        - 
        - mass_ratio = 0.0         # test particle
        - u0 = Float64[π, 0.0]     # initial conditions
        - datasize = 250
        - tspan = (0.0f0, 6.0f4)   # timespace for GW waveform
        - tsteps = range(tspan[1], tspan[2]; length=datasize)  # time at each timestep
        - dt_data = tsteps[2] - tsteps[1]
        - dt = 100.0
        - const ode_model_params = [100.0, 1.0, 0.5]; # p, M, e
        - ````
        - 
        - Let's simulate the true model and plot the results using `OrdinaryDiffEq.jl`
        - 
        - ````julia
        - prob = ODEProblem(RelativisticOrbitModel, u0, tspan, ode_model_params)
        - soln = Array(solve(prob, RK4(); saveat=tsteps, dt, adaptive=false))
        - waveform = first(compute_waveform(dt_data, soln, mass_ratio, ode_model_params))
        - 
        - fig = with_theme(theme_web()) do
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Time", ylabel="Waveform")
        - 
        -     l = lines!(ax, tsteps, waveform; linewidth=2, alpha=0.75)
        -     s = scatter!(ax, tsteps, waveform; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     axislegend(ax, [[l, s]], ["Waveform Data"])
        - 
        -     return fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=408 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAMwCAIAAAC/VA7OAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdd3wc9Z0//s+UrVr1YlnNXe4VG4NNs40pNiUkoRgSLsBxlFzujlyO8oDHJXnkGyAxR3LcQeASSnKhmN78OxtwbDAGF3DvlmxZsvpKWmn7Tvv9MdLoMzO7a1mWV7Or1/Nxj3usZse7owyrnfe835/3m1EUhQAAAAAAAMDIww73AQAAAAAAAMDwQEAIAAAAAAAwQiEgBAAAAAAAGKEQEAIAAAAAAIxQCAgBAAAAAABGKASEAAAAAAAAIxQCQgAAAAAAgBEKASEAAAAAAMAIhYAQAAAAAABghEJACAAAAAAAMEIhIAQAAAAAABihEBACAAAAAACMUAgIAQAAAAAARigEhAAAAAAAACMUAkIAAAAAAIARCgEhAAAAAADACIWAEAAAAAAAYIRCQAgAAAAAADBCISAEAAAAAAAYoRAQAgAAAAAAjFAICAEAAAAAAEYoBIQAAAAAAAAjFAJCAAAAAACAEQoBIQAAAAAAwAiFgBAAAAAAAGCEQkAIAAAAAAAwQiEgBAAAAAAAGKEQEAIAAAAAAIxQCAgBAAAAAABGKASEAAAAAAAAIxQ/3AcAQ4ZhmOE+BAAAAAAAGGKKopy7F0eGEAAAAAAAYIRChjDTnNP7BwAAAAAAkDIpqAFEhhAAAAAAAGCEQkAIAAAAAAAwQiEgBAAAAAAAGKEQEAIAAAAAAIxQCAgBAAAAAABGKASEAAAAAAAAIxQCQgAAAAAAgBEKASEAAAAAAMAIhcH0mcbj8WiPA4HAMB4JAAAAAABYHKMoynAfAwwNhmEMW3ByAQAAAADSl3qFf06v6pEhzDR+v3+4DwEAAAAAANIDMoSZIwX3DwAAAAAAIG
        - ```
        - 
        - ## Defiing a Neural Network Model
        - 
        - Next, we define the neural network model that takes 1 input (time) and has two outputs.
        - We'll make a function `ODE_model` that takes the initial conditions, neural network
        - parameters and a time as inputs and returns the derivatives.
        - 
        - It is typically never recommended to use globals but incase you do use them, make sure
        - to mark them as `const`.
        - 
        - We will deviate from the standard Neural Network initialization and use
        - `WeightInitializers.jl`,
        - 
        - ````julia
        - const nn = Chain(Base.Fix1(broadcast, cos),
        -     Dense(1 => 32, cos; init_weight=truncated_normal(; std=1e-4)),
        -     Dense(32 => 32, cos; init_weight=truncated_normal(; std=1e-4)),
        -     Dense(32 => 2; init_weight=truncated_normal(; std=1e-4)))
        - ps, st = Lux.setup(MersenneTwister(), nn)
        - ````
        - 
        - ````
        - ((layer_1 = NamedTuple(), layer_2 = (weight = Float32[-8.641842f-5; -6.3431966f-5; -0.00012540893; -7.166758f-5; -0.00010338631; 2.2095146f-5; -1.1490735f-5; 3.444935f-5; 2.8767681f-5; 4.8608268f-5; 6.7880785f-5; -0.00018085197; 0.00016328119; 8.965231f-5; -1.1694697f-5; -4.2391635f-5; 7.4421473f-6; 8.59599f-5; -3.573612f-6; 4.039322f-6; 6.209838f-5; -1.623405f-5; -0.00010709692; 3.4528628f-5; 0.00016391868; -0.00019266059; 0.00016890062; -2.7660302f-5; -0.00015494136; 7.370511f-5; -1.0690265f-5; 0.00016037618;;], bias = Float32[0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0;;]), layer_3 = (weight = Float32[-2.3348033f-5 -3.1535365f-5 0.00011424321 -8.451874f-5 0.00012364458 8.7624154f-5 -0.00015708084 -2.6562371f-5 -0.00010497625 0.0001365068 0.00010965637 -0.00018019685 0.00018246935 4.030619f-6 -0.00018214864 0.000121699246 -1.8334147f-5 -0.00014826152 -0.00015516215 -3.0039144f-5 2.34542f-5 -7.
        - ````
        - 
        - Similar to most DL frameworks, Lux defaults to using `Float32`, however, in this case we
        - need Float64
        - 
        - ````julia
        - const params = ComponentArray{Float64}(ps)
        - ````
        - 
        - ````
        - ComponentVector{Float64}(layer_1 = Float64[], layer_2 = (weight = [-8.64184185047634e-5; -6.343196582747623e-5; -0.00012540892930701375; -7.166757859522477e-5; -0.00010338630818296224; 2.2095146050560288e-5; -1.1490735232655425e-5; 3.444934918661602e-5; 2.876768121495843e-5; 4.860826811636798e-5; 6.788078462705016e-5; -0.00018085197370965034; 0.00016328119090758264; 8.96523124538362e-5; -1.1694696695485618e-5; -4.2391635361127555e-5; 7.442147307301639e-6; 8.595990220783278e-5; -3.5736120480578393e-6; 4.039321993332123e-6; 6.20983773842454e-5; -1.623404932615813e-5; -0.00010709692287491634; 3.452862802078016e-5; 0.00016391868120990694; -0.00019266059098299593; 0.0001689006166998297; -2.7660302293952554e-5; -0.00015494135732296854; 7.370510866167024e-5; -1.0690265298762824e-5; 0.00016037617751862854;;], bias = [0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0;;]), layer_3 = (weight = [-2.33480332099134
        - ````
        - 
        - Now we define a system of odes which describes motion of point like particle with
        - Newtonian physics, uses
        - 
        - $$u[1] = \chi$$
        - $$u[2] = \phi$$
        - 
        - where, $p$, $M$, and $e$ are constants
        - 
        - ````julia
        - function ODE_model(u, nn_params, t)
        -     χ, ϕ = u
        -     p, M, e = ode_model_params
        - 
        -     # In this example we know that `st` is am empty NamedTuple hence we can safely ignore
        -     # it, however, in general, we should use `st` to store the state of the neural network.
        -     y = 1 .+ first(nn([first(u)], nn_params, st))
        - 
        -     numer = (1 + e * cos(χ))^2
        -     denom = M * (p^(3 / 2))
        - 
        -     χ̇ = (numer / denom) * y[1]
        -     ϕ̇ = (numer / denom) * y[2]
        - 
        -     return [χ̇, ϕ̇]
        - end
        - ````
        - 
        - ````
        - ODE_model (generic function with 1 method)
        - ````
        - 
        - Let us now simulate the neural network model and plot the results. We'll use the untrained
        - neural network parameters to simulate the model.
        - 
        - ````julia
        - prob_nn = ODEProblem(ODE_model, u0, tspan, params)
        - soln_nn = Array(solve(prob_nn, RK4(); u0, p=params, saveat=tsteps, dt, adaptive=false))
        - waveform_nn = first(compute_waveform(dt_data, soln_nn, mass_ratio, ode_model_params))
        - 
        - fig = with_theme(theme_web()) do
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Time", ylabel="Waveform")
        - 
        -     l1 = lines!(ax, tsteps, waveform; linewidth=2, alpha=0.75)
        -     s1 = scatter!(ax, tsteps, waveform; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     l2 = lines!(ax, tsteps, waveform_nn; linewidth=2, alpha=0.75)
        -     s2 = scatter!(ax, tsteps, waveform_nn; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     axislegend(ax, [[l1, s1], [l2, s2]],
        -         ["Waveform Data", "Waveform Neural Net (Untrained)"]; position=:lb)
        - 
        -     return fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=408 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAMwCAIAAAC/VA7OAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdeZAkV3U/+nNvZtbee/dM9+z7aIYZLUhCCDAGg/kZngQYg4UD20QYCGNHmDBB+B/+gghHOLAdOIwJGxsc3sI/JId/fsjYxjx4Fg+0IbSPpNHM9Ixmenrfu9bc7r3vj6zOullVPdPbdGdVfz+hP6qzUlUpkqrKk+fcc5hSigAAAAAAAGDn4dt9AAAAAAAAALA9EBACAAAAAADsUAgIAQAAAAAAdigEhAAAAAAAADsUAkIAAAAAAIAdCgEhAAAAAADADoWAEAAAAAAAYIdCQAgAAAAAALBDISAEAAAAAADYoRAQAgAAAAAA7FAICAEAAAAAAHYoBIQAAAAAAAA7FAJCAAAAAACAHQoBIQAAAAAAwA6FgBAAAAAAAGCHQkAIAAAAAACwQyEgBAAAAAAA2KEQEAIAAAAAAOxQCAgBAAAAAAB2KASEAAAAAAAAOxQCQgAAAAAAgB0KASEAAAAAAMAOhYAQAAAAAABgh0JACAAAAAAAsEMhIAQAAAAAANihEBACAAAAAADsUAgIAQAAAAAAdigEhAAAAAAAADsUAkIAAAAAAIAdCgEhAAAAAADADmVu9wHApmGMbfchAAAAAADAJlNK3boXR4YQAAAAAABgh0KGsN3c0vsHAAAAAACwZbagBhAZQgAAAAAAgB0KASEAAAAAAMAOhYAQAAAAAABgh0JACAAAAAAAsEMhIAQAAAAAANihEBACAAAAAADsUAgIAQAAAAAAdigEhAAAAAAAADsUBtO3m4ceeih8/Mgjj2zjkQAAAAAAQMwxpdR2HwNsDsZY3RacXAAAAACA1hVc4d/Sq3pkCNvNww8/vN2HAAAAAAAArQEZwv
        - ```
        - 
        - ## Setting Up for Training the Neural Network
        - 
        - Next, we define the objective (loss) function to be minimized when training the neural
        - differential equations.
        - 
        - ````julia
        - function loss(θ)
        -     pred = Array(solve(prob_nn, RK4(); u0, p=θ, saveat=tsteps, dt, adaptive=false))
        -     pred_waveform = first(compute_waveform(dt_data, pred, mass_ratio, ode_model_params))
        -     loss = sum(abs2, waveform .- pred_waveform)
        -     return loss, pred_waveform
        - end
        - ````
        - 
        - ````
        - loss (generic function with 1 method)
        - ````
        - 
        - Warmup the loss function
        - 
        - ````julia
        - loss(params)
        - ````
        - 
        - ````
        - (0.17882541503140287, [-0.02427713329807589, -0.023491449998989153, -0.022705766699902517, -0.021378238680536368, -0.019481128911144834, -0.016974179255262338, -0.013804541371280262, -0.009903821875011884, -0.0051903654712836715, 0.0004310688858023682, 0.0070600514779764565, 0.014779440660067415, 0.023607582894042318, 0.0333695470975455, 0.04341807157221731, 0.05197409851530691, 0.0547325236874646, 0.04259092563367653, 0.0019933367495452736, -0.0663831874395651, -0.11048702747302164, -0.07628739711163536, -0.006540835855731235, 0.039184133628272326, 0.05453930756892186, 0.05306629813031567, 0.04483044359809625, 0.03471963003632618, 0.024770879637997078, 0.01573767969551861, 0.007829189892855977, 0.0010401571033105967, -0.00471308334567972, -0.009533613245572047, -0.013521025316873532, -0.01676044165882741, -0.019324091069997495, -0.021268370026846683, -0.022636088166311588, -0.023457415294555087, -0.02375089612505248, -0.023523833003257735, -0.022773610373831993, -0.021485341857230823, -0.01963408394098878, 
        - ````
        - 
        - Now let us define a callback function to store the loss over time
        - 
        - ````julia
        - const losses = Float64[]
        - 
        - function callback(θ, l, pred_waveform)
        -     push!(losses, l)
        -     println("Training || Iteration: $(length(losses)) || Loss: $(l)")
        -     return false
        - end
        - ````
        - 
        - ````
        - callback (generic function with 1 method)
        - ````
        - 
        - ## Training the Neural Network
        - 
        - Training uses the BFGS optimizers. This seems to give good results because the Newtonian
        - model seems to give a very good initial guess
        - 
        - ````julia
        - adtype = Optimization.AutoZygote()
        - optf = Optimization.OptimizationFunction((x, p) -> loss(x), adtype)
        - optprob = Optimization.OptimizationProblem(optf, params)
        - res = Optimization.solve(
        -     optprob, BFGS(; initial_stepnorm=0.01, linesearch=LineSearches.BackTracking());
        -     callback, maxiters=1000)
        - ````
        - 
        - ````
        - retcode: Success
        - u: ComponentVector{Float64}(layer_1 = Float64[], layer_2 = (weight = [-8.64184185046428e-5; -6.343196582746737e-5; -0.00012540892930695466; -7.166757859500762e-5; -0.00010338630818291314; 2.2095146050528677e-5; -1.1490735232618248e-5; 3.444934918660557e-5; 2.8767681214940784e-5; 4.860826811636097e-5; 6.788078462700552e-5; -0.00018085197370959634; 0.00016328119090747617; 8.965231245378241e-5; -1.169469669548648e-5; -4.239163536115796e-5; 7.442147307297914e-6; 8.595990220783906e-5; -3.573612048051144e-6; 4.039321993326281e-6; 6.209837738417053e-5; -1.623404932613592e-5; -0.00010709692287469164; 3.4528628020769604e-5; 0.00016391868120995076; -0.0001926605909827583; 0.00016890061669965547; -2.7660302293922092e-5; -0.00015494135732300776; 7.370510866160814e-5; -1.0690265298748237e-5; 0.0001603761775185222;;], bias = [-1.3281454301971542e-16; -1.0471252461996746e-17; -6.850534303937623e-17; -2.3710123021303605e-16; -5.40182568852853e-17; 3.397508667550762e-17; -4.000075456426158e-17; 1.2230972296422128e-17; 1.8975
        - ````
        - 
        - ## Visualizing the Results
        - 
        - Let us now plot the loss over time
        - 
        - ````julia
        - fig = with_theme(theme_web()) do
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Iteration", ylabel="Loss")
        - 
        -     lines!(ax, losses; linewidth=2, alpha=0.75)
        - 
        -     return fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=408 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAMwCAIAAAC/VA7OAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdeZRdVZ0v8H1rSFWlUqkhqUoIEJIQgQABmYIkoAwOJIRBhYbXarN8tGL7xG6623a1uhrt9exuFcfn84liK7a0Dep6CUMCDfhsIIR5MATEhBASMlUlVZWq1Dzc98cJN7cyVipV99zh8/lrn3NPzv2VFdbym733byeSyWQAAACg8BTFXQAAAADxEAgBAAAKlEAIAABQoARCAACAAiUQAgAAFCiBEAAAoEAJhAAAAAVKIAQAAChQAiEAAECBEggBAAAKlEAIAABQoARCAACAAiUQAgAAFCiBEAAAoEAJhAAAAAVKIAQAAChQAiEAAECBEggBAAAKlEAIAABQoARCAACAAiUQAgAAFCiBEAAAoEAJhAAAAAVKIAQAAChQAiEAAECBEggBAAAKlEAIAABQoARCAACAAiUQAgAAFCiBEAAAoECVxF0AB5RIJOIuAQAAiFkymRy7l5shBAAAKFBmCLPdmP57AAAAkLUysGbQDCEAAECBEggBAAAKlEAIAABQoARCAACAAiUQAgAAFCiBEAAAoEAJhAAAAAVKIAQAAChQAiEAAECBEggBAAAKlEAIAABQoARCAACAAiUQAgAAFCiBEAAAoEAJhAAAAAVKIAQAAChQAiEAAECBEggBAAAKlEAIAABQoARCAACAAiUQAgAAFCiBEAAAoEAJhAAAAAWqJO4COIQlS5akxldddVWMlQAAAHkmkUwm466B/UskEnvd8csCAIDCESWCMU0BZgiz3ZVXXhl3CQAAQH4yQ5i9MvDvAQAAQNbKQCLQVAYAAKBAWTLKoXX39De1djW2dHX19J1/+tFxlwMAAIwOgZBD6Ojq++pPn47GpS
        - ```
        - 
        - Finally let us visualize the results
        - 
        - ````julia
        - prob_nn = ODEProblem(ODE_model, u0, tspan, res.u)
        - soln_nn = Array(solve(prob_nn, RK4(); u0, p=res.u, saveat=tsteps, dt, adaptive=false))
        - waveform_nn_trained = first(compute_waveform(
        -     dt_data, soln_nn, mass_ratio, ode_model_params))
        - 
        - fig = with_theme(theme_web()) do
        -     fig = Figure()
        -     ax = CairoMakie.Axis(fig[1, 1]; xlabel="Time", ylabel="Waveform")
        - 
        -     l1 = lines!(ax, tsteps, waveform; linewidth=2, alpha=0.75)
        -     s1 = scatter!(ax, tsteps, waveform; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     l2 = lines!(ax, tsteps, waveform_nn; linewidth=2, alpha=0.75)
        -     s2 = scatter!(ax, tsteps, waveform_nn; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     l3 = lines!(ax, tsteps, waveform_nn_trained; linewidth=2, alpha=0.75)
        -     s3 = scatter!(
        -         ax, tsteps, waveform_nn_trained; markershape=:circle, markeralpha=0.25, alpha=0.5)
        - 
        -     axislegend(ax, [[l1, s1], [l2, s2], [l3, s3]],
        -         ["Waveform Data", "Waveform Neural Net (Untrained)", "Waveform Neural Net"];
        -         position=:lb)
        - 
        -     return fig
        - end
        - ````
        - 
        - ```@raw html
        - <img width=600 height=408 style='object-fit: contain; height: auto;' src="data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAABLAAAAMwCAIAAAC/VA7OAAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nOzdaYwk13Uv+HPujYjcal+6qrt6Z5PNpkhRCymRNG1LluY9S49a3oNkfbABAZYNeGDAHsPwZ8ufbciwIBs2ZMAbjCf5PQzE0Xj8tNijkShTMkUt3Mlustfq7tqXXGO598yHyOVmVTdZ3V2sjMz6/0AYkVFRmVeOjso4cc49l0WEAAAAAAAAYP9RvR4AAAAAAAAA9AYCQgAAAAAAgH0KASEAAAAAAMA+hYAQAAAAAABgn0JACAAAAAAAsE8hIAQAAAAAANinEBACAAAAAADsUwgIAQAAAAAA9ikEhAAAAAAAAPsUAkIAAAAAAIB9CgEhAAAAAADAPoWAEAAAAAAAYJ9CQAgAAAAAALBPISAEAAAAAADYpxAQAgAAAAAA7FMICAEAAAAAAPYpBIQAAAAAAAD7FAJCAAAAAACAfQoBIQAAAAAAwD6FgBAAAAAAAGCfQkAIAAAAAACwTyEgBAAAAAAA2KcQEAIAAAAAAOxTCAgBAAAAAAD2KQSEAAAAAAAA+xQCQgAAAAAAgH0KASEAAAAAAMA+hYAQAAAAAABgn0JACAAAAAAAsE8hIAQAAAAAANinvF4PAHYNM/d6CAAAAAAAsMtE5O17c2QIAQAAAAAA9ilkCAfN2/r8AAAAAAAA9swe1AAiQwgAAAAAALBPISAEAAAAAADYpxAQAgAAAAAA7FMICAEAAAAAAPYpBIQAAAAAAAD7FAJCAAAAAACAfQoBIQAAAAAAwD6FgBAAAAAAAGCfQkAIAAAAAACwTyEgBAAAAAAA2KcQEAIAAAAAAOxTCAgBAAAAAAD2KQSEAAAAAAAA+xQCQgAAAAAAgH0KASEAAAAAAMA+hY
        - ```
        - 
        - ## Appendix
        - 
        - ````julia
        - using InteractiveUtils
        - InteractiveUtils.versioninfo()
        - if @isdefined(LuxCUDA) && CUDA.functional(); println(); CUDA.versioninfo(); end
        - if @isdefined(LuxAMDGPU) && LuxAMDGPU.functional(); println(); AMDGPU.versioninfo(); end
        - ````
        - 
        - ````
        - Julia Version 1.10.2
        - Commit bd47eca2c8a (2024-03-01 10:14 UTC)
        - Build Info:
        -   Official https://julialang.org/ release
        - Platform Info:
        -   OS: Linux (x86_64-linux-gnu)
        -   CPU: 48 × AMD EPYC 7402 24-Core Processor
        -   WORD_SIZE: 64
        -   LIBM: libopenlibm
        -   LLVM: libLLVM-15.0.7 (ORCJIT, znver2)
        - Threads: 48 default, 0 interactive, 24 GC (on 2 virtual cores)
        - Environment:
        -   LD_LIBRARY_PATH = /usr/local/nvidia/lib:/usr/local/nvidia/lib64
        -   JULIA_DEPOT_PATH = /root/.cache/julia-buildkite-plugin/depots/01872db4-8c79-43af-ab7d-12abac4f24f6
        -   JULIA_PROJECT = /var/lib/buildkite-agent/builds/gpuci-4/julialang/lux-dot-jl/docs/Project.toml
        -   JULIA_AMDGPU_LOGGING_ENABLED = true
        -   JULIA_DEBUG = Literate
        -   JULIA_CPU_THREADS = 2
        -   JULIA_NUM_THREADS = 48
        -   JULIA_LOAD_PATH = @:@v#.#:@stdlib
        -   JULIA_CUDA_HARD_MEMORY_LIMIT = 25%
        - 
        - CUDA runtime 12.3, artifact installation
        - CUDA driver 12.4
        - NVIDIA driver 550.54.14
        - 
        - CUDA libraries: 
        - - CUBLAS: 12.3.4
        - - CURAND: 10.3.4
        - - CUFFT: 11.0.12
        - - CUSOLVER: 11.5.4
        - - CUSPARSE: 12.2.0
        - - CUPTI: 21.0.0
        - - NVML: 12.0.0+550.54.14
        - 
        - Julia packages: 
        - - CUDA: 5.2.0
        - - CUDA_Driver_jll: 0.7.0+1
        - - CUDA_Runtime_jll: 0.11.1+0
        - 
        - Toolchain:
        - - Julia: 1.10.2
        - - LLVM: 15.0.7
        - 
        - Environment:
        - - JULIA_CUDA_HARD_MEMORY_LIMIT: 25%
        - 
        - 1 device:
        -   0: NVIDIA A100-PCIE-40GB MIG 1g.5gb (sm_80, 3.850 GiB / 4.750 GiB available)
        - ┌ Warning: LuxAMDGPU is loaded but the AMDGPU is not functional.
        - └ @ LuxAMDGPU ~/.cache/julia-buildkite-plugin/depots/01872db4-8c79-43af-ab7d-12abac4f24f6/packages/LuxAMDGPU/sGa0S/src/LuxAMDGPU.jl:19
        - 
        - ````
        - 
        - ---
        - 
        - *This page was generated using [Literate.jl](https://github.com/fredrikekre/Literate.jl).*
        - 
