import { _ as _export_sfc, c as createElementBlock, o as openBlock, a4 as createStaticVNode } from "./chunks/framework.nJ_0eXy8.js";
const __pageData = JSON.parse('{"title":"Nested Automatic Differentiation","description":"","frontmatter":{},"headers":[],"relativePath":"manual/nested_autodiff.md","filePath":"manual/nested_autodiff.md","lastUpdated":null}');
const _sfc_main = { name: "manual/nested_autodiff.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="Nested-Automatic-Differentiation" tabindex="-1">Nested Automatic Differentiation <a class="header-anchor" href="#Nested-Automatic-Differentiation" aria-label="Permalink to &quot;Nested Automatic Differentiation {#Nested-Automatic-Differentiation}&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">Note</p><p>This is a relatively new feature in Lux, so there might be some rough edges. If you encounter any issues, please let us know by opening an issue on the <a href="https://github.com/LuxDL/Lux.jl" target="_blank" rel="noreferrer">GitHub repository</a>.</p></div><p>In this manual, we will explore how to use automatic differentiation (AD) inside your layers or loss functions and have Lux automatically switch the AD backend with a faster one when needed.</p><div class="tip custom-block"><p class="custom-block-title">Tip</p><p>Don&#39;t wan&#39;t Lux to do this switching for you? You can disable it by setting the <code>DisableAutomaticNestedADSwitching</code> Preference to <code>true</code>.</p><p>Remember that if you are using ForwardDiff inside a Zygote call, it will drop gradients (with a warning message), so it is not recommended to use this combination.</p></div><p>Let&#39;s explore this using some questions that were posted on the <a href="https://discourse.julialang.org/" target="_blank" rel="noreferrer">Julia Discourse forum</a>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Lux, LinearAlgebra, Zygote, ForwardDiff, Random</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ComponentArrays, FiniteDiff</span></span></code></pre></div><p>First let&#39;s set the stage using some minor changes that need to be made for this feature to work:</p><ul><li><p>Switching only works if a <a href="/v0.5.39/api/Lux/contrib#StatefulLuxLayer"><code>StatefulLuxLayer</code></a> is being used, with the following function calls:</p><ul><li><p><code>(&lt;some-function&gt; ∘ &lt;StatefulLuxLayer&gt;)(x::AbstractArray)</code></p></li><li><p><code>(&lt;StatefulLuxLayer&gt; ∘ &lt;some-function&gt;)(x::AbstractArray)</code></p></li><li><p><code>(&lt;StatefulLuxLayer&gt;)(x::AbstractArray)</code></p></li></ul></li><li><p>Currently we have custom routines implemented for:</p><ul><li><p><code>Zygote.&lt;gradient|jacobian&gt;</code></p></li><li><p><code>ForwardDiff.&lt;gradient|jacobian&gt;</code></p></li></ul></li><li><p>Switching only happens for <code>ChainRules</code> compatible AD libraries.</p></li></ul><p>We plan to capture <code>DifferentiationInterface</code>, <code>Zygote.pullback</code>, and <code>Enzyme.autodiff</code> calls in the future (PRs are welcome).</p><h2 id="Nested-AD-for-Neural-Differential-Equations-(DEs)" tabindex="-1">Nested AD for Neural Differential Equations (DEs) <a class="header-anchor" href="#Nested-AD-for-Neural-Differential-Equations-(DEs)" aria-label="Permalink to &quot;Nested AD for Neural Differential Equations (DEs) {#Nested-AD-for-Neural-Differential-Equations-(DEs)}&quot;">​</a></h2><p>This problem comes from <code>@facusapienza</code> on <a href="https://discourse.julialang.org/t/nested-and-different-ad-methods-altogether-how-to-add-ad-calculations-inside-my-loss-function-when-using-neural-differential-equations/108985" target="_blank" rel="noreferrer">Discourse</a>. In this case, we want to add a regularization term to the neural DE based on first-order derivatives. The neural DE part is not important here and we can demonstrate this easily with a standard neural network.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loss_function1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, x, ps, st, y)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Make it a stateful layer</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    smodel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> StatefulLuxLayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, ps, st)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ŷ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> smodel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    loss_emp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(abs2, ŷ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # You can use `Zygote.jacobian` as well but ForwardDiff tends to be more efficient here</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    J </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ForwardDiff</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">jacobian</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(smodel, x)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    loss_reg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> abs2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">norm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(J))</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loss_emp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loss_reg</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Using Batchnorm to show that it is possible</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Chain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, tanh), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BatchNorm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ps, st </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Lux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Xoshiro</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), model)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Xoshiro</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), Float32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Xoshiro</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), Float32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loss_function1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, x, ps, st, y)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>165.72057f0</span></span></code></pre></div><p>So our loss function works, let&#39;s take the gradient (forward diff doesn&#39;t nest nicely here):</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_, ∂x, ∂ps, _, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Zygote</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gradient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loss_function1, model, x, ps, st, y)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>((layers = (layer_1 = nothing, layer_2 = (activation = nothing, epsilon = Dual{ForwardDiff.Tag{LuxForwardDiffExt.var&quot;#25#30&quot;{LuxForwardDiffExt.var&quot;#24#29&quot;{Int64, StatefulLuxLayer{true, Chain{@NamedTuple{layer_1::Dense{true, typeof(tanh_fast), typeof(glorot_uniform), typeof(zeros32)}, layer_2::BatchNorm{true, true, Float32, typeof(identity), typeof(zeros32), typeof(ones32)}, layer_3::Dense{true, typeof(identity), typeof(glorot_uniform), typeof(zeros32)}}, Nothing}, @NamedTuple{layer_1::@NamedTuple{weight::Matrix{Float32}, bias::Matrix{Float32}}, layer_2::@NamedTuple{scale::Vector{Float32}, bias::Vector{Float32}}, layer_3::@NamedTuple{weight::Matrix{Float32}, bias::Matrix{Float32}}}, @NamedTuple{layer_1::@NamedTuple{}, layer_2::@NamedTuple{running_mean::Vector{Float32}, running_var::Vector{Float32}, training::Val{true}}, layer_3::@NamedTuple{}}}}, Zygote.ZygoteRuleConfig{Zygote.Context{false}}}, Float32}}(-386.85785,-3856.9404), momentum = nothing, chs = nothing, init_bias = nothing, init_scale = nothing), layer_3 = nothing), name = nothing), Float32[69.40097 -29.407625 … 62.17947 -11.346848; 32.62757 -10.706492 … 125.40416 23.984774], (layer_1 = (weight = Float32[128.21242 -2.7218657; -60.290134 -18.761536; -120.385544 186.72293; 60.66426 -63.01136], bias = Float32[2.0310452; 0.98244834; -23.050823; 0.03951931;;]), layer_2 = (scale = Float32[40.33447, 155.65297, 127.573814, -5.4919634], bias = Float32[0.9106768, 10.253795, -0.19426548, -1.9935048]), layer_3 = (weight = Float32[32.27755 -8.509816 120.66005 94.590904; 163.24374 -199.22812 -50.508865 25.844988], bias = Float32[-10.008913; -9.107419;;])), nothing, Float32[-0.37958467 2.7677505 … -0.7500516 1.0776312; 2.1326292 -1.0316236 … -0.9032748 -1.2118767])</span></span></code></pre></div><p>Now let&#39;s verify the gradients using finite differences:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">∂x_fd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FiniteDiff</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">finite_difference_gradient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loss_function1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, x, ps, st, y), x)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">∂ps_fd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FiniteDiff</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">finite_difference_gradient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loss_function1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, x, ps, st, y),</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ComponentArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ps))</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;∞-norm(∂x - ∂x_fd): &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">norm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(∂x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ∂x_fd, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Inf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;∞-norm(∂ps - ∂ps_fd): &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">norm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ComponentArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(∂ps) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ∂ps_fd, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Inf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>∞-norm(∂x - ∂x_fd): 0.007297516</span></span>\n<span class="line"><span>∞-norm(∂ps - ∂ps_fd): 0.0048828125</span></span></code></pre></div><p>That&#39;s pretty good, of course you will have some error from the finite differences calculation.</p><h2 id="Loss-Function-contains-Gradient-Calculation" tabindex="-1">Loss Function contains Gradient Calculation <a class="header-anchor" href="#Loss-Function-contains-Gradient-Calculation" aria-label="Permalink to &quot;Loss Function contains Gradient Calculation {#Loss-Function-contains-Gradient-Calculation}&quot;">​</a></h2><p>Ok here I am going to cheat a bit. This comes from a discussion on nested AD for PINNs on <a href="https://discourse.julialang.org/t/is-it-possible-to-do-nested-ad-elegantly-in-julia-pinns/98888/21" target="_blank" rel="noreferrer">Discourse</a>. As the consensus there, we shouldn&#39;t use nested AD for 3rd or higher order differentiation. Note that in the example there, the user uses <code>ForwardDiff.derivative</code> but we will use <code>ForwardDiff.gradient</code> instead, as we typically deal with array inputs and outputs.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loss_function2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, t, ps, st)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    smodel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> StatefulLuxLayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, ps, st)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ŷ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> only</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Zygote</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gradient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Fix1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum, abs2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">∘</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> smodel, t)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Zygote returns a tuple</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(abs2, ŷ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.(t))</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Chain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,tanh), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,tanh), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,tanh),</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Dense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ps, st </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Lux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Xoshiro</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), model)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Xoshiro</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), Float32, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>1×16 Matrix{Float32}:</span></span>\n<span class="line"><span> 0.0586123  0.455238  0.910939  0.547642  …  0.746801  0.293364  0.97667</span></span></code></pre></div><p>Now the moment of truth:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_, ∂t, ∂ps, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Zygote</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gradient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loss_function2, model, t, ps, st)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>(nothing, Float32[-1.8308691 -0.8374245 … -1.275464 -0.31520173], (layer_1 = (weight = Float32[-1.8511395; 0.39384133; … ; 0.42303964; 0.94145787;;], bias = Float32[-2.375833; 0.48580098; … ; 0.9097727; 1.5578191;;]), layer_2 = (weight = Float32[-0.07090395 -0.4673439 … -0.7997387 -1.7557127; 0.038976178 0.25688845 … 0.43955547 0.96433765; … ; -0.060112145 -0.39623925 … -0.67815405 -1.4901716; -0.09203279 -0.60663146 … -1.0381725 -2.280345], bias = Float32[4.7003975; -2.4536555; … ; 4.247031; 6.3379955;;]), layer_3 = (weight = Float32[1.0819058 0.21379921 … -1.2322779 -1.1289285; 0.16966453 0.033501856 … -0.19315632 -0.17704664; … ; 1.8901241 0.37323296 … -2.1518624 -1.9723612; -1.1680417 -0.23115604 … 1.3315424 1.2187041], bias = Float32[4.039097; 0.61936504; … ; 6.9021044; -4.548923;;]), layer_4 = (weight = Float32[-5.0290794 1.3268019 … -1.4954324 7.7300863], bias = Float32[19.100182;;])), nothing)</span></span></code></pre></div><p>Boom that worked! Let&#39;s verify the gradient using forward diff:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">∂t_fd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ForwardDiff</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gradient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loss_function2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, t, ps, st), t)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">∂ps_fd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ForwardDiff</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gradient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loss_function2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, t, ps, st), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ComponentArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ps))</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;∞-norm(∂t - ∂t_fd): &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">norm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(∂t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ∂t_fd, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Inf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;∞-norm(∂ps - ∂ps_fd): &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">norm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ComponentArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(∂ps) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ∂ps_fd, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Inf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>∞-norm(∂t - ∂t_fd): 2.3841858e-7</span></span>\n<span class="line"><span>∞-norm(∂ps - ∂ps_fd): 1.4305115e-6</span></span></code></pre></div>', 30);
const _hoisted_31 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_31);
}
const nested_autodiff = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  nested_autodiff as default
};
