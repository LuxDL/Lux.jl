import { _ as _export_sfc, c as createElementBlock, o as openBlock, a3 as createStaticVNode } from "./chunks/framework.DVlmWVQO.js";
const __pageData = JSON.parse('{"title":"Training a Simple LSTM","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/beginner/3_SimpleRNN.md","filePath":"tutorials/beginner/3_SimpleRNN.md","lastUpdated":null}');
const _sfc_main = { name: "tutorials/beginner/3_SimpleRNN.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="Training-a-Simple-LSTM" tabindex="-1">Training a Simple LSTM <a class="header-anchor" href="#Training-a-Simple-LSTM" aria-label="Permalink to &quot;Training a Simple LSTM {#Training-a-Simple-LSTM}&quot;">​</a></h1><p>In this tutorial we will go over using a recurrent neural network to classify clockwise and anticlockwise spirals. By the end of this tutorial you will be able to:</p><ol><li><p>Create custom Lux models.</p></li><li><p>Become familiar with the Lux recurrent neural network API.</p></li><li><p>Training using Optimisers.jl and Zygote.jl.</p></li></ol><h2 id="Package-Imports" tabindex="-1">Package Imports <a class="header-anchor" href="#Package-Imports" aria-label="Permalink to &quot;Package Imports {#Package-Imports}&quot;">​</a></h2><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ADTypes, Lux, LuxAMDGPU, LuxCUDA, JLD2, MLUtils, Optimisers, Zygote, Printf, Random,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Statistics</span></span></code></pre></div><h2 id="Dataset" tabindex="-1">Dataset <a class="header-anchor" href="#Dataset" aria-label="Permalink to &quot;Dataset {#Dataset}&quot;">​</a></h2><p>We will use MLUtils to generate 500 (noisy) clockwise and 500 (noisy) anticlockwise spirals. Using this data we will create a <code>MLUtils.DataLoader</code>. Our dataloader will give us sequences of size 2 × seq_len × batch_size and we need to predict a binary value whether the sequence is clockwise or anticlockwise.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_dataloaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; dataset_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sequence_length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Create the spirals</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [MLUtils</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Datasets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">make_spiral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sequence_length) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dataset_size]</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Get the labels</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    labels </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vcat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], dataset_size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">÷</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], dataset_size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">÷</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    clockwise_spirals </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reshape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][:, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequence_length], :, sequence_length, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                         for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dataset_size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">÷</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    anticlockwise_spirals </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reshape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 d[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][:, (sequence_length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], :, sequence_length, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                             for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data[((dataset_size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">÷</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Float32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clockwise_spirals</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, anticlockwise_spirals</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Split the dataset</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (x_train, y_train), (x_val, y_val) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> splitobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((x_data, labels); at</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, shuffle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Create DataLoaders</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Use DataLoader to automatically minibatch and shuffle the data</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        DataLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.((x_train, y_train)); batchsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, shuffle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Don&#39;t shuffle the validation data</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        DataLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.((x_val, y_val)); batchsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, shuffle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>get_dataloaders (generic function with 1 method)</span></span></code></pre></div><h2 id="Creating-a-Classifier" tabindex="-1">Creating a Classifier <a class="header-anchor" href="#Creating-a-Classifier" aria-label="Permalink to &quot;Creating a Classifier {#Creating-a-Classifier}&quot;">​</a></h2><p>We will be extending the <code>Lux.AbstractExplicitContainerLayer</code> type for our custom model since it will contain a lstm block and a classifier head.</p><p>We pass the fieldnames <code>lstm_cell</code> and <code>classifier</code> to the type to ensure that the parameters and states are automatically populated and we don&#39;t have to define <code>Lux.initialparameters</code> and <code>Lux.initialstates</code>.</p><p>To understand more about container layers, please look at <a href="/v0.5.41/manual/interface#Container-Layer">Container Layer</a>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SpiralClassifier{L, C} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       Lux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AbstractExplicitContainerLayer{(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:lstm_cell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:classifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lstm_cell</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">L</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    classifier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>We won&#39;t define the model from scratch but rather use the <a href="/v0.5.41/api/Lux/layers#Lux.LSTMCell"><code>Lux.LSTMCell</code></a> and <a href="/v0.5.41/api/Lux/layers#Lux.Dense"><code>Lux.Dense</code></a>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SpiralClassifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(in_dims, hidden_dims, out_dims)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SpiralClassifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        LSTMCell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(in_dims </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hidden_dims), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hidden_dims </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> out_dims, sigmoid))</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Main.var&quot;##225&quot;.SpiralClassifier</span></span></code></pre></div><p>We can use default Lux blocks – <code>Recurrence(LSTMCell(in_dims =&gt; hidden_dims)</code> – instead of defining the following. But let&#39;s still do it for the sake of it.</p><p>Now we need to define the behavior of the Classifier when it is invoked.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SpiralClassifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray{T, 3}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, st</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T}</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # First we will have to run the sequence through the LSTM Cell</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # The first call to LSTM Cell will create the initial hidden state</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # See that the parameters and states are automatically populated into a field called</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # `lstm_cell` We use `eachslice` to get the elements in the sequence without copying,</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # and `Iterators.peel` to split out the first element for LSTM initialization.</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x_init, x_rest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Iterators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">peel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Lux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_eachslice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (y, carry), st_lstm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lstm_cell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x_init, ps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lstm_cell, st</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lstm_cell)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Now that we have the hidden state and memory in `carry` we will pass the input and</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # `carry` jointly</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x_rest</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (y, carry), st_lstm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lstm_cell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((x, carry), ps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lstm_cell, st_lstm)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # After running through the sequence we will pass the output through the classifier</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y, st_classifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">classifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y, ps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">classifier, st</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">classifier)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Finally remember to create the updated state</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    st </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(st, (classifier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">st_classifier, lstm_cell</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">st_lstm))</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y), st</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h2 id="Using-the-@compact-API" tabindex="-1">Using the <code>@compact</code> API <a class="header-anchor" href="#Using-the-@compact-API" aria-label="Permalink to &quot;Using the `@compact` API {#Using-the-@compact-API}&quot;">​</a></h2><p>We can also define the model using the <a href="/v0.5.41/api/Lux/utilities#Lux.@compact"><code>Lux.@compact</code></a> API, which is a more concise way of defining models. This macro automatically handles the boilerplate code for you and as such we recommend this way of defining custom layers</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SpiralClassifierCompact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(in_dims, hidden_dims, out_dims)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lstm_cell </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LSTMCell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(in_dims </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hidden_dims)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    classifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Dense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hidden_dims </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> out_dims, sigmoid)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @compact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; lstm_cell, classifier) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray{T, 3}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        x_init, x_rest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Iterators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">peel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Lux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_eachslice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        y, carry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> lstm_cell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x_init)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x_rest</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            y, carry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> lstm_cell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((x, carry))</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        end</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">classifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y))</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>SpiralClassifierCompact (generic function with 1 method)</span></span></code></pre></div><h2 id="Defining-Accuracy,-Loss-and-Optimiser" tabindex="-1">Defining Accuracy, Loss and Optimiser <a class="header-anchor" href="#Defining-Accuracy,-Loss-and-Optimiser" aria-label="Permalink to &quot;Defining Accuracy, Loss and Optimiser {#Defining-Accuracy,-Loss-and-Optimiser}&quot;">​</a></h2><p>Now let&#39;s define the binarycrossentropy loss. Typically it is recommended to use <code>logitbinarycrossentropy</code> since it is more numerically stable, but for the sake of simplicity we will use <code>binarycrossentropy</code>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xlogy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ifelse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">iszero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">zero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result), result)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> binarycrossentropy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y_pred, y_true)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y_pred </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y_pred </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> eps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">eltype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y_pred))</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">xlogy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y_true, y_pred) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xlogy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y_true, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y_pred))</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compute_loss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, ps, st, (x, y))</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y_pred, st </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, ps, st)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> binarycrossentropy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y_pred, y), st, (; y_pred</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y_pred)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y_pred, y_true) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((y_pred </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y_true)</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accuracy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y_pred, y_true) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> matches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y_pred, y_true) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y_pred)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>accuracy (generic function with 1 method)</span></span></code></pre></div><h2 id="Training-the-Model" tabindex="-1">Training the Model <a class="header-anchor" href="#Training-the-Model" aria-label="Permalink to &quot;Training the Model {#Training-the-Model}&quot;">​</a></h2><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model_type)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Get the dataloaders</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (train_loader, val_loader) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> get_dataloaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Create the model</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> model_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rng </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Xoshiro</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> gpu_device</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    train_state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Lux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Experimental</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TrainState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        rng, model, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Adam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.01f0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); transform_variables</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> epoch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Train the model</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x, y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> train_loader</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dev</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dev</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            gs, loss, _, train_state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Lux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Experimental</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">compute_gradients</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                AutoZygote</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), compute_loss, (x, y), train_state)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            train_state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Lux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Experimental</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply_gradients</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(train_state, gs)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            @printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Epoch [%3d]: Loss %4.5f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> epoch loss</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        end</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Validate the model</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        st_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Lux</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">testmode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(train_state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">states)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x, y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val_loader</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dev</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dev</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            loss, st_, ret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> compute_loss</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(model, train_state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parameters, st_, (x, y))</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            acc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> accuracy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ret</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y_pred, y)</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            @printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Validation: Loss %4.5f Accuracy %4.5f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loss acc</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        end</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (train_state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parameters, train_state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">states) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cpu_device</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ps_trained, st_trained </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SpiralClassifier)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Epoch [  1]: Loss 0.56196</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.50252</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.48691</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.45798</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.43157</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.41007</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.38485</span></span>\n<span class="line"><span>Validation: Loss 0.36817 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.36769 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.37153</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.35382</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.33159</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.31969</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.30714</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.29225</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.28225</span></span>\n<span class="line"><span>Validation: Loss 0.25866 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.25839 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.26054</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.24494</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.23610</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.22150</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.21479</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.20267</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.19246</span></span>\n<span class="line"><span>Validation: Loss 0.18172 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.18168 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.17930</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.17634</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.16417</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.15909</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.15238</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.14352</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.13680</span></span>\n<span class="line"><span>Validation: Loss 0.13071 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.13076 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.13209</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.12524</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.11824</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.11480</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.11049</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.10540</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.09912</span></span>\n<span class="line"><span>Validation: Loss 0.09550 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.09558 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.09645</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.09262</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.08754</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.08288</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.08205</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.07784</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.07236</span></span>\n<span class="line"><span>Validation: Loss 0.07049 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.07056 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.07097</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.06758</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.06659</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.06335</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.05820</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.05910</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.05614</span></span>\n<span class="line"><span>Validation: Loss 0.05252 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.05257 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.05351</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.05079</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.04877</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.04849</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.04368</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.04297</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.04689</span></span>\n<span class="line"><span>Validation: Loss 0.03941 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.03945 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03801</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03870</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03905</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03618</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03425</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03227</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03329</span></span>\n<span class="line"><span>Validation: Loss 0.02998 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.03000 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02991</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02809</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02856</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02768</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02581</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02713</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02963</span></span>\n<span class="line"><span>Validation: Loss 0.02347 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.02346 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02523</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02375</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02230</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02136</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02130</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02016</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.01896</span></span>\n<span class="line"><span>Validation: Loss 0.01899 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.01899 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01992</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01838</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01792</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01717</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01894</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01679</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01888</span></span>\n<span class="line"><span>Validation: Loss 0.01591 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.01590 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01695</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01629</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01551</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01483</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01491</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01457</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01383</span></span>\n<span class="line"><span>Validation: Loss 0.01369 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.01368 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01388</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01325</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01386</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01358</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01328</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01276</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01263</span></span>\n<span class="line"><span>Validation: Loss 0.01204 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.01203 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01193</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01209</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01199</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01226</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01183</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01125</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01126</span></span>\n<span class="line"><span>Validation: Loss 0.01075 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.01075 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01071</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01114</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01051</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01083</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01086</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.00961</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01167</span></span>\n<span class="line"><span>Validation: Loss 0.00972 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00971 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.00999</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.01040</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.00905</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.00961</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.00928</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.00954</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.00999</span></span>\n<span class="line"><span>Validation: Loss 0.00885 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00884 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00952</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00876</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00935</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00866</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00883</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00788</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00872</span></span>\n<span class="line"><span>Validation: Loss 0.00812 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00811 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00820</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00854</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00806</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00783</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00819</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00797</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00778</span></span>\n<span class="line"><span>Validation: Loss 0.00749 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00748 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00803</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00789</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00743</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00761</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00745</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00700</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00612</span></span>\n<span class="line"><span>Validation: Loss 0.00695 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00694 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00623</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00727</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00731</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00712</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00667</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00725</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00693</span></span>\n<span class="line"><span>Validation: Loss 0.00647 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00646 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00663</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00698</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00694</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00624</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00608</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00628</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00621</span></span>\n<span class="line"><span>Validation: Loss 0.00605 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00604 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00600</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00614</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00648</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00565</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00598</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00631</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00608</span></span>\n<span class="line"><span>Validation: Loss 0.00568 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00567 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00546</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00587</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00580</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00580</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00576</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00584</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00498</span></span>\n<span class="line"><span>Validation: Loss 0.00534 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00533 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00535</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00548</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00552</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00563</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00542</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00503</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00501</span></span>\n<span class="line"><span>Validation: Loss 0.00503 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00503 Accuracy 1.00000</span></span></code></pre></div><p>We can also train the compact model with the exact same code!</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ps_trained2, st_trained2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SpiralClassifierCompact)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Epoch [  1]: Loss 0.56143</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.52034</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.46823</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.44829</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.42545</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.40882</span></span>\n<span class="line"><span>Epoch [  1]: Loss 0.40170</span></span>\n<span class="line"><span>Validation: Loss 0.36795 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.36599 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.35803</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.35027</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.33330</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.32041</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.30925</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.29337</span></span>\n<span class="line"><span>Epoch [  2]: Loss 0.28297</span></span>\n<span class="line"><span>Validation: Loss 0.25840 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.25694 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.26420</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.24248</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.23496</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.22559</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.20812</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.20247</span></span>\n<span class="line"><span>Epoch [  3]: Loss 0.18786</span></span>\n<span class="line"><span>Validation: Loss 0.18127 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.18041 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.18307</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.17360</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.16516</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.15662</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.14996</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.14224</span></span>\n<span class="line"><span>Epoch [  4]: Loss 0.13735</span></span>\n<span class="line"><span>Validation: Loss 0.13001 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.12941 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.12906</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.12434</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.11871</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.11576</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.10864</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.10465</span></span>\n<span class="line"><span>Epoch [  5]: Loss 0.09691</span></span>\n<span class="line"><span>Validation: Loss 0.09478 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.09425 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.09441</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.09144</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.08734</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.08430</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.07928</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.07664</span></span>\n<span class="line"><span>Epoch [  6]: Loss 0.07493</span></span>\n<span class="line"><span>Validation: Loss 0.06996 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.06946 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.07205</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.06746</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.06473</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.06240</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.05783</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.05682</span></span>\n<span class="line"><span>Epoch [  7]: Loss 0.05616</span></span>\n<span class="line"><span>Validation: Loss 0.05218 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.05174 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.05236</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.04869</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.04850</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.04733</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.04573</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.04433</span></span>\n<span class="line"><span>Epoch [  8]: Loss 0.03743</span></span>\n<span class="line"><span>Validation: Loss 0.03921 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.03884 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.04022</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03839</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03640</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03659</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03290</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03099</span></span>\n<span class="line"><span>Epoch [  9]: Loss 0.03493</span></span>\n<span class="line"><span>Validation: Loss 0.02992 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.02959 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.03004</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02895</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02786</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02830</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02603</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02592</span></span>\n<span class="line"><span>Epoch [ 10]: Loss 0.02394</span></span>\n<span class="line"><span>Validation: Loss 0.02350 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.02323 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02278</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02380</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02308</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02195</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02175</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.01950</span></span>\n<span class="line"><span>Epoch [ 11]: Loss 0.02037</span></span>\n<span class="line"><span>Validation: Loss 0.01911 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.01888 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01932</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01949</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01897</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01770</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01732</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01684</span></span>\n<span class="line"><span>Epoch [ 12]: Loss 0.01623</span></span>\n<span class="line"><span>Validation: Loss 0.01606 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.01585 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01524</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01660</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01604</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01559</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01520</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01428</span></span>\n<span class="line"><span>Epoch [ 13]: Loss 0.01432</span></span>\n<span class="line"><span>Validation: Loss 0.01386 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.01369 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01409</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01391</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01361</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01297</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01389</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01274</span></span>\n<span class="line"><span>Epoch [ 14]: Loss 0.01147</span></span>\n<span class="line"><span>Validation: Loss 0.01222 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.01206 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01267</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01263</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01126</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01189</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01156</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01174</span></span>\n<span class="line"><span>Epoch [ 15]: Loss 0.01122</span></span>\n<span class="line"><span>Validation: Loss 0.01093 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.01079 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01125</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01098</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01029</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01126</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.00994</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01068</span></span>\n<span class="line"><span>Epoch [ 16]: Loss 0.01050</span></span>\n<span class="line"><span>Validation: Loss 0.00989 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00976 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.01084</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.00946</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.00992</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.01049</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.00822</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.00933</span></span>\n<span class="line"><span>Epoch [ 17]: Loss 0.01045</span></span>\n<span class="line"><span>Validation: Loss 0.00902 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00890 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00939</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00880</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00905</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00918</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00850</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00842</span></span>\n<span class="line"><span>Epoch [ 18]: Loss 0.00928</span></span>\n<span class="line"><span>Validation: Loss 0.00828 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00817 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00865</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00850</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00773</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00811</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00867</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00753</span></span>\n<span class="line"><span>Epoch [ 19]: Loss 0.00805</span></span>\n<span class="line"><span>Validation: Loss 0.00764 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00754 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00826</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00775</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00758</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00727</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00712</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00757</span></span>\n<span class="line"><span>Epoch [ 20]: Loss 0.00729</span></span>\n<span class="line"><span>Validation: Loss 0.00709 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00699 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00732</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00690</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00694</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00734</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00685</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00687</span></span>\n<span class="line"><span>Epoch [ 21]: Loss 0.00721</span></span>\n<span class="line"><span>Validation: Loss 0.00661 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00652 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00702</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00640</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00690</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00693</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00545</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00659</span></span>\n<span class="line"><span>Epoch [ 22]: Loss 0.00715</span></span>\n<span class="line"><span>Validation: Loss 0.00618 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00609 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00602</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00612</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00674</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00625</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00605</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00588</span></span>\n<span class="line"><span>Epoch [ 23]: Loss 0.00556</span></span>\n<span class="line"><span>Validation: Loss 0.00579 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00571 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00556</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00610</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00597</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00600</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00549</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00558</span></span>\n<span class="line"><span>Epoch [ 24]: Loss 0.00557</span></span>\n<span class="line"><span>Validation: Loss 0.00545 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00537 Accuracy 1.00000</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00516</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00553</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00578</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00535</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00518</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00583</span></span>\n<span class="line"><span>Epoch [ 25]: Loss 0.00456</span></span>\n<span class="line"><span>Validation: Loss 0.00514 Accuracy 1.00000</span></span>\n<span class="line"><span>Validation: Loss 0.00507 Accuracy 1.00000</span></span></code></pre></div><h2 id="Saving-the-Model" tabindex="-1">Saving the Model <a class="header-anchor" href="#Saving-the-Model" aria-label="Permalink to &quot;Saving the Model {#Saving-the-Model}&quot;">​</a></h2><p>We can save the model using JLD2 (and any other serialization library of your choice) Note that we transfer the model to CPU before saving. Additionally, we recommend that you don&#39;t save the model</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@save</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;trained_model.jld2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {compress </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} ps_trained st_trained</span></span></code></pre></div><p>Let&#39;s try loading the model</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;trained_model.jld2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ps_trained st_trained</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>2-element Vector{Symbol}:</span></span>\n<span class="line"><span> :ps_trained</span></span>\n<span class="line"><span> :st_trained</span></span></code></pre></div><h2 id="Appendix" tabindex="-1">Appendix <a class="header-anchor" href="#Appendix" aria-label="Permalink to &quot;Appendix {#Appendix}&quot;">​</a></h2><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InteractiveUtils</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">InteractiveUtils</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">versioninfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @isdefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LuxCUDA) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CUDA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">functional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); CUDA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">versioninfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @isdefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LuxAMDGPU) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LuxAMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">functional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); AMDGPU</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">versioninfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Julia Version 1.10.3</span></span>\n<span class="line"><span>Commit 0b4590a5507 (2024-04-30 10:59 UTC)</span></span>\n<span class="line"><span>Build Info:</span></span>\n<span class="line"><span>  Official https://julialang.org/ release</span></span>\n<span class="line"><span>Platform Info:</span></span>\n<span class="line"><span>  OS: Linux (x86_64-linux-gnu)</span></span>\n<span class="line"><span>  CPU: 48 × AMD EPYC 7402 24-Core Processor</span></span>\n<span class="line"><span>  WORD_SIZE: 64</span></span>\n<span class="line"><span>  LIBM: libopenlibm</span></span>\n<span class="line"><span>  LLVM: libLLVM-15.0.7 (ORCJIT, znver2)</span></span>\n<span class="line"><span>Threads: 6 default, 0 interactive, 3 GC (on 2 virtual cores)</span></span>\n<span class="line"><span>Environment:</span></span>\n<span class="line"><span>  LD_LIBRARY_PATH = /usr/local/nvidia/lib:/usr/local/nvidia/lib64</span></span>\n<span class="line"><span>  JULIA_DEPOT_PATH = /root/.cache/julia-buildkite-plugin/depots/01872db4-8c79-43af-ab7d-12abac4f24f6</span></span>\n<span class="line"><span>  JULIA_PROJECT = /var/lib/buildkite-agent/builds/gpuci-9/julialang/lux-dot-jl/docs</span></span>\n<span class="line"><span>  JULIA_AMDGPU_LOGGING_ENABLED = true</span></span>\n<span class="line"><span>  JULIA_DEBUG = Literate</span></span>\n<span class="line"><span>  JULIA_CPU_THREADS = 2</span></span>\n<span class="line"><span>  JULIA_NUM_THREADS = 6</span></span>\n<span class="line"><span>  JULIA_LOAD_PATH = @:@v#.#:@stdlib</span></span>\n<span class="line"><span>  JULIA_CUDA_HARD_MEMORY_LIMIT = 25%</span></span>\n<span class="line"><span>  JULIA_PKG_PRECOMPILE_AUTO = 0</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>CUDA runtime 12.4, artifact installation</span></span>\n<span class="line"><span>CUDA driver 12.4</span></span>\n<span class="line"><span>NVIDIA driver 550.54.15</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>CUDA libraries: </span></span>\n<span class="line"><span>- CUBLAS: 12.4.5</span></span>\n<span class="line"><span>- CURAND: 10.3.5</span></span>\n<span class="line"><span>- CUFFT: 11.2.1</span></span>\n<span class="line"><span>- CUSOLVER: 11.6.1</span></span>\n<span class="line"><span>- CUSPARSE: 12.3.1</span></span>\n<span class="line"><span>- CUPTI: 22.0.0</span></span>\n<span class="line"><span>- NVML: 12.0.0+550.54.15</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Julia packages: </span></span>\n<span class="line"><span>- CUDA: 5.3.3</span></span>\n<span class="line"><span>- CUDA_Driver_jll: 0.8.1+0</span></span>\n<span class="line"><span>- CUDA_Runtime_jll: 0.12.1+0</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Toolchain:</span></span>\n<span class="line"><span>- Julia: 1.10.3</span></span>\n<span class="line"><span>- LLVM: 15.0.7</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Environment:</span></span>\n<span class="line"><span>- JULIA_CUDA_HARD_MEMORY_LIMIT: 25%</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>1 device:</span></span>\n<span class="line"><span>  0: NVIDIA A100-PCIE-40GB MIG 1g.5gb (sm_80, 4.359 GiB / 4.750 GiB available)</span></span>\n<span class="line"><span>┌ Warning: LuxAMDGPU is loaded but the AMDGPU is not functional.</span></span>\n<span class="line"><span>└ @ LuxAMDGPU ~/.cache/julia-buildkite-plugin/depots/01872db4-8c79-43af-ab7d-12abac4f24f6/packages/LuxAMDGPU/sGa0S/src/LuxAMDGPU.jl:19</span></span></code></pre></div><hr><p><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl" target="_blank" rel="noreferrer">Literate.jl</a>.</em></p>', 45);
const _hoisted_46 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_46);
}
const _3_SimpleRNN = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _3_SimpleRNN as default
};
