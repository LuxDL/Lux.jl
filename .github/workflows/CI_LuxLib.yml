name: CI (LuxLib)
on:
  pull_request:
    branches:
      - main
    paths:
      - "lib/LuxLib/**"
      - ".github/workflows/CI_LuxLib.yml"
      - "lib/LuxTestUtils/**"
      - "lib/LuxCore/**"
      - "lib/MLDataDevices/**"
  push:
    branches:
      - main

concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  test:
    if: ${{ !contains(github.event.head_commit.message, '[skip tests]') }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - "1"
        os:
          - ubuntu-latest
        test_group:
          - "conv"
          - "dense"
          - "normalization"
          - "misc"
        blas_backend:
          - "default"
        loopvec:
          - "true"
        include:
          - version: "1"
            os: ubuntu-latest
            test_group: "dense"
            blas_backend: "default"
            loopvec: "false"
          - version: "1"
            os: ubuntu-latest
            test_group: "misc"
            blas_backend: "default"
            loopvec: "false"
          - version: "1"
            os: macos-latest
            test_group: "all"
            blas_backend: "default"
            loopvec: "true"
          - version: "1"
            os: windows-latest
            test_group: "all"
            blas_backend: "default"
            loopvec: "true"
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
      - uses: actions/cache@v4
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1
        with:
          project: "lib/LuxLib"
      - name: "Dev Test Dependencies"
        run: |
          import Pkg
          dev_pkgs = Pkg.PackageSpec[]
          for pkg in ("lib/LuxTestUtils", "lib/LuxLib", "lib/MLDataDevices")
            push!(dev_pkgs, Pkg.PackageSpec(path=pkg))
          end
          Pkg.develop(dev_pkgs)
        shell: julia --color=yes --code-coverage=user --depwarn=yes --project=lib/LuxLib/test {0}
      - name: "Run Tests"
        run: |
          import Pkg, LuxLib
          dir = dirname(pathof(LuxLib))
          include(joinpath(dir, "../test/runtests.jl"))
        shell: julia --color=yes --code-coverage=user --depwarn=yes --project=lib/LuxLib/test {0}
        env:
          LUXLIB_TEST_GROUP: ${{ matrix.test_group }}
          LUXLIB_BLAS_BACKEND: ${{ matrix.blas_backend }}
          LUXLIB_LOAD_LOOPVEC: ${{ matrix.loopvec }}
      - uses: julia-actions/julia-processcoverage@v1
        with:
          directories: lib/LuxLib/src,lib/LuxLib/ext,lib/LuxCore/src,lib/LuxCore/ext,lib/MLDataDevices/src,lib/MLDataDevices/ext,lib/LuxTestUtils/src
      - uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
          fail_ci_if_error: false

  downgrade:
    if: ${{ !contains(github.event.head_commit.message, '[skip tests]') && github.base_ref == github.event.repository.default_branch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: "1.10"
      - uses: julia-actions/julia-downgrade-compat@v1
        with:
          skip: "LuxCore,MLDataDevices"
      - uses: julia-actions/julia-buildpkg@v1
        with:
          project: "lib/LuxLib"
      - name: "Dev Test Dependencies"
        run: |
          import Pkg
          dev_pkgs = Pkg.PackageSpec[]
          for pkg in ("lib/LuxTestUtils", "lib/LuxLib", "lib/MLDataDevices")
            push!(dev_pkgs, Pkg.PackageSpec(path=pkg))
          end
          Pkg.develop(dev_pkgs)
        shell: julia --color=yes --code-coverage=user --depwarn=yes --project=lib/LuxLib/test {0}
      - name: "Run Tests"
        run: |
          import Pkg, LuxLib
          dir = dirname(pathof(LuxLib))
          include(joinpath(dir, "../test/runtests.jl"))
        shell: julia --color=yes --code-coverage=user --depwarn=yes --project=lib/LuxLib/test {0}
        env:
          LUXLIB_TEST_GROUP: "all"
          LUXLIB_BLAS_BACKEND: "default"
          LUXLIB_LOAD_LOOPVEC: "true"
      - uses: julia-actions/julia-processcoverage@v1
        with:
          directories: lib/LuxLib/src,lib/LuxLib/ext,lib/LuxCore/src,lib/LuxCore/ext,lib/MLDataDevices/src,lib/MLDataDevices/ext,lib/LuxTestUtils/src
      - uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
          fail_ci_if_error: false

env:
  BACKEND_GROUP: "CPU"
